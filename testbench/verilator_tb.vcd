$version Generated by VerilatedVcd $end
$date Wed Apr 13 15:17:20 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 T* clk_i $end
  $var wire  1 V* fetch_enable_i $end
  $var wire  1 U* rst_ni $end
  $var wire  1 X* tests_failed_o $end
  $var wire  1 W* tests_passed_o $end
  $scope module cv32e40p_apu_core_pkg $end
   $var wire 32 P+ APU_NARGS_CPU [31:0] $end
   $var wire 32 u+ APU_NDSFLAGS_CPU [31:0] $end
   $var wire 32 Q+ APU_NUSFLAGS_CPU [31:0] $end
   $var wire 32 t+ APU_WOP_CPU [31:0] $end
   $var wire 32 k* PIPE_REG_ADDSUB [31:0] $end
   $var wire 32 k* PIPE_REG_CAST [31:0] $end
   $var wire 32 w* PIPE_REG_MAC [31:0] $end
   $var wire 32 k* PIPE_REG_MULT [31:0] $end
  $upscope $end
  $scope module cv32e40p_fpu_pkg $end
   $var wire 32 t, FP_FORMAT_BITS [31:0] $end
   $var wire 32 N, INT_FORMAT_BITS [31:0] $end
   $var wire 32 s, NUM_FP_FORMATS [31:0] $end
   $var wire 32 u, NUM_INT_FORMATS [31:0] $end
   $var wire 32 u, OP_BITS [31:0] $end
  $upscope $end
  $scope module cv32e40p_pkg $end
   $var wire 32 R+ ALU_OP_WIDTH [31:0] $end
   $var wire  5 u* AMO_ADD [4:0] $end
   $var wire  5 S- AMO_AND [4:0] $end
   $var wire  5 O- AMO_LR [4:0] $end
   $var wire  5 V- AMO_MAX [4:0] $end
   $var wire  5 X- AMO_MAXU [4:0] $end
   $var wire  5 U- AMO_MIN [4:0] $end
   $var wire  5 W- AMO_MINU [4:0] $end
   $var wire  5 T- AMO_OR [4:0] $end
   $var wire  5 P- AMO_SC [4:0] $end
   $var wire  5 Q- AMO_SWAP [4:0] $end
   $var wire  5 R- AMO_XOR [4:0] $end
   $var wire  1 (, BMASK_A_IMM [0:0] $end
   $var wire  1 &, BMASK_A_REG [0:0] $end
   $var wire  1 (, BMASK_A_S3 [0:0] $end
   $var wire  1 &, BMASK_A_ZERO [0:0] $end
   $var wire  1 (, BMASK_B_IMM [0:0] $end
   $var wire  2 0- BMASK_B_ONE [1:0] $end
   $var wire  1 &, BMASK_B_REG [0:0] $end
   $var wire  2 {* BMASK_B_S2 [1:0] $end
   $var wire  2 N+ BMASK_B_S3 [1:0] $end
   $var wire  2 ', BMASK_B_ZERO [1:0] $end
   $var wire  2 0- BRANCH_COND [1:0] $end
   $var wire  2 N+ BRANCH_JAL [1:0] $end
   $var wire  2 ', BRANCH_JALR [1:0] $end
   $var wire  2 {* BRANCH_NONE [1:0] $end
   $var wire 32 2- CSR_MEIX_BIT [31:0] $end
   $var wire 32 4- CSR_MFIX_BIT_HIGH [31:0] $end
   $var wire 32 3- CSR_MFIX_BIT_LOW [31:0] $end
   $var wire 32 t, CSR_MSIX_BIT [31:0] $end
   $var wire 32 1- CSR_MTIX_BIT [31:0] $end
   $var wire 32 w* CSR_OP_WIDTH [31:0] $end
   $var wire 32 Q+ C_FFLAG [31:0] $end
   $var wire 32 v+ C_FLEN [31:0] $end
   $var wire 32 `- C_LAT_CONV [31:0] $end
   $var wire 32 K, C_LAT_DIVSQRT [31:0] $end
   $var wire 32 `- C_LAT_FP16 [31:0] $end
   $var wire 32 `- C_LAT_FP16ALT [31:0] $end
   $var wire 32 `- C_LAT_FP32 [31:0] $end
   $var wire 32 `- C_LAT_FP64 [31:0] $end
   $var wire 32 `- C_LAT_FP8 [31:0] $end
   $var wire 32 `- C_LAT_NONCOMP [31:0] $end
   $var wire 32 P+ C_RM [31:0] $end
   $var wire  1 L, C_RVD $end
   $var wire  1 _- C_RVF $end
   $var wire  1 L, C_XF16 $end
   $var wire  1 L, C_XF16ALT $end
   $var wire  1 L, C_XF8 $end
   $var wire  1 L, C_XFVEC $end
   $var wire  3 @- DBG_CAUSE_EBREAK [2:0] $end
   $var wire  6 ^- DBG_CAUSE_HALT [5:0] $end
   $var wire  3 B- DBG_CAUSE_HALTREQ [2:0] $end
   $var wire  3 x* DBG_CAUSE_NONE [2:0] $end
   $var wire  3 ]- DBG_CAUSE_RSTHALTREQ [2:0] $end
   $var wire  3 C- DBG_CAUSE_STEP [2:0] $end
   $var wire  3 A- DBG_CAUSE_TRIGGER [2:0] $end
   $var wire 32 k* DBG_SETS_EBRK [31:0] $end
   $var wire 32 O+ DBG_SETS_ECALL [31:0] $end
   $var wire 32 P+ DBG_SETS_EILL [31:0] $end
   $var wire 32 w* DBG_SETS_ELSU [31:0] $end
   $var wire 32 Q+ DBG_SETS_IRQ [31:0] $end
   $var wire 32 j* DBG_SETS_SSTE [31:0] $end
   $var wire 32 t+ DBG_SETS_W [31:0] $end
   $var wire  5 P- EXC_CAUSE_BREAKPOINT [4:0] $end
   $var wire  5 [- EXC_CAUSE_ECALL_MMODE [4:0] $end
   $var wire  5 T- EXC_CAUSE_ECALL_UMODE [4:0] $end
   $var wire  5 O- EXC_CAUSE_ILLEGAL_INSN [4:0] $end
   $var wire  5 Q- EXC_CAUSE_INSTR_FAULT [4:0] $end
   $var wire  5 Y- EXC_CAUSE_LOAD_FAULT [4:0] $end
   $var wire  5 Z- EXC_CAUSE_STORE_FAULT [4:0] $end
   $var wire  3 A- EXC_PC_DBD [2:0] $end
   $var wire  3 B- EXC_PC_DBE [2:0] $end
   $var wire  3 x* EXC_PC_EXCEPTION [2:0] $end
   $var wire  3 @- EXC_PC_IRQ [2:0] $end
   $var wire 32 w* HALTED_INDEX [31:0] $end
   $var wire 32 j* HAVERESET_INDEX [31:0] $end
   $var wire  1 &, IMMA_Z [0:0] $end
   $var wire  1 (, IMMA_ZERO [0:0] $end
   $var wire  4 N- IMMB_BI [3:0] $end
   $var wire  4 M- IMMB_CLIP [3:0] $end
   $var wire  4 D- IMMB_I [3:0] $end
   $var wire  4 G- IMMB_PCINCR [3:0] $end
   $var wire  4 E- IMMB_S [3:0] $end
   $var wire  4 H- IMMB_S2 [3:0] $end
   $var wire  4 I- IMMB_S3 [3:0] $end
   $var wire  4 L- IMMB_SHUF [3:0] $end
   $var wire  4 F- IMMB_U [3:0] $end
   $var wire  4 J- IMMB_VS [3:0] $end
   $var wire  4 K- IMMB_VU [3:0] $end
   $var wire 32 \- IRQ_MASK [31:0] $end
   $var wire  2 0- JT_COND [1:0] $end
   $var wire  2 N+ JT_JAL [1:0] $end
   $var wire  2 ', JT_JALR [1:0] $end
   $var wire 32 ?- MARCHID [31:0] $end
   $var wire  1 (, MIMM_S3 [0:0] $end
   $var wire  1 &, MIMM_ZERO [0:0] $end
   $var wire 32 P+ MUL_OP_WIDTH [31:0] $end
   $var wire 25 >- MVENDORID_BANK [24:0] $end
   $var wire  7 =- MVENDORID_OFFSET [6:0] $end
   $var wire  7 *- OPCODE_AMO [6:0] $end
   $var wire  7 !- OPCODE_AUIPC [6:0] $end
   $var wire  7 |, OPCODE_BRANCH [6:0] $end
   $var wire  7 w, OPCODE_FENCE [6:0] $end
   $var wire  7 /- OPCODE_HWLOOP [6:0] $end
   $var wire  7 ~, OPCODE_JAL [6:0] $end
   $var wire  7 }, OPCODE_JALR [6:0] $end
   $var wire  7 {, OPCODE_LOAD [6:0] $end
   $var wire  7 )- OPCODE_LOAD_FP [6:0] $end
   $var wire  7 +- OPCODE_LOAD_POST [6:0] $end
   $var wire  7 "- OPCODE_LUI [6:0] $end
   $var wire  7 x, OPCODE_OP [6:0] $end
   $var wire  7 y, OPCODE_OPIMM [6:0] $end
   $var wire  7 $- OPCODE_OP_FMADD [6:0] $end
   $var wire  7 &- OPCODE_OP_FMSUB [6:0] $end
   $var wire  7 %- OPCODE_OP_FNMADD [6:0] $end
   $var wire  7 '- OPCODE_OP_FNMSUB [6:0] $end
   $var wire  7 #- OPCODE_OP_FP [6:0] $end
   $var wire  7 -- OPCODE_PULP_OP [6:0] $end
   $var wire  7 z, OPCODE_STORE [6:0] $end
   $var wire  7 (- OPCODE_STORE_FP [6:0] $end
   $var wire  7 ,- OPCODE_STORE_POST [6:0] $end
   $var wire  7 v, OPCODE_SYSTEM [6:0] $end
   $var wire  7 .- OPCODE_VECOP [6:0] $end
   $var wire  3 @- OP_A_CURRPC [2:0] $end
   $var wire  3 A- OP_A_IMM [2:0] $end
   $var wire  3 x* OP_A_REGA_OR_FWD [2:0] $end
   $var wire  3 B- OP_A_REGB_OR_FWD [2:0] $end
   $var wire  3 C- OP_A_REGC_OR_FWD [2:0] $end
   $var wire  3 C- OP_B_BMASK [2:0] $end
   $var wire  3 A- OP_B_IMM [2:0] $end
   $var wire  3 B- OP_B_REGA_OR_FWD [2:0] $end
   $var wire  3 x* OP_B_REGB_OR_FWD [2:0] $end
   $var wire  3 @- OP_B_REGC_OR_FWD [2:0] $end
   $var wire  2 ', OP_C_JT [1:0] $end
   $var wire  2 N+ OP_C_REGB_OR_FWD [1:0] $end
   $var wire  2 {* OP_C_REGC_OR_FWD [1:0] $end
   $var wire  4 D- PC_BOOT [3:0] $end
   $var wire  4 G- PC_BRANCH [3:0] $end
   $var wire  4 K- PC_DRET [3:0] $end
   $var wire  4 H- PC_EXCEPTION [3:0] $end
   $var wire  4 E- PC_FENCEI [3:0] $end
   $var wire  4 L- PC_HWLOOP [3:0] $end
   $var wire  4 F- PC_JUMP [3:0] $end
   $var wire  4 I- PC_MRET [3:0] $end
   $var wire  4 J- PC_URET [3:0] $end
   $var wire  2 N+ REGC_RD [1:0] $end
   $var wire  2 ', REGC_S1 [1:0] $end
   $var wire  2 {* REGC_S4 [1:0] $end
   $var wire  2 0- REGC_ZERO [1:0] $end
   $var wire 32 k* RUNNING_INDEX [31:0] $end
   $var wire  2 N+ SEL_FW_EX [1:0] $end
   $var wire  2 ', SEL_FW_WB [1:0] $end
   $var wire  2 {* SEL_REGFILE [1:0] $end
   $var wire 16 6- SP_DCR0 [15:0] $end
   $var wire  8 :- SP_DCR_MSB [7:0] $end
   $var wire 16 7- SP_DMR1 [15:0] $end
   $var wire 16 8- SP_DMR2 [15:0] $end
   $var wire  8 ;- SP_DMR_MSB [7:0] $end
   $var wire  8 <- SP_DSR_MSB [7:0] $end
   $var wire 16 5- SP_DVR0 [15:0] $end
   $var wire  8 9- SP_DVR_MSB [7:0] $end
   $var wire  2 {* TRAP_MACHINE [1:0] $end
   $var wire  2 N+ TRAP_USER [1:0] $end
   $var wire  2 ', VEC_MODE16 [1:0] $end
   $var wire  2 {* VEC_MODE32 [1:0] $end
   $var wire  2 0- VEC_MODE8 [1:0] $end
  $upscope $end
  $scope module tb_top_verilator $end
   $var wire 32 g* BOOT_ADDR [31:0] $end
   $var wire 32 e* INSTR_RDATA_WIDTH [31:0] $end
   $var wire 32 f* RAM_ADDR_WIDTH [31:0] $end
   $var wire  1 T* clk_i $end
   $var wire 32 D cycle_cnt_q [31:0] $end
   $var wire  1 7* exit_valid $end
   $var wire 32 8* exit_value [31:0] $end
   $var wire  1 V* fetch_enable_i $end
   $var wire  1 U* rst_ni $end
   $var wire  1 X* tests_failed_o $end
   $var wire  1 W* tests_passed_o $end
   $scope module cv32e40p_tb_wrapper_i $end
    $var wire 32 g* BOOT_ADDR [31:0] $end
    $var wire 32 h* DM_HALTADDRESS [31:0] $end
    $var wire 32 j* FPU [31:0] $end
    $var wire 32 i* HART_ID [31:0] $end
    $var wire 32 e* INSTR_RDATA_WIDTH [31:0] $end
    $var wire 32 k* NUM_MHPMCOUNTERS [31:0] $end
    $var wire 32 j* PULP_CLUSTER [31:0] $end
    $var wire 32 j* PULP_XPULP [31:0] $end
    $var wire 32 j* PULP_ZFINX [31:0] $end
    $var wire 32 f* RAM_ADDR_WIDTH [31:0] $end
    $var wire  1 T* clk_i $end
    $var wire  1 [* core_sleep_o $end
    $var wire 32 Y# data_addr [31:0] $end
    $var wire  4 [# data_be [3:0] $end
    $var wire  1 )* data_gnt $end
    $var wire 32 Z* data_rdata [31:0] $end
    $var wire  1 X# data_req $end
    $var wire  1 Y* data_rvalid $end
    $var wire 32 \# data_wdata [31:0] $end
    $var wire  1 Z# data_we $end
    $var wire  1 F debug_req $end
    $var wire  1 7* exit_valid_o $end
    $var wire 32 8* exit_value_o [31:0] $end
    $var wire  1 V* fetch_enable_i $end
    $var wire 32 Z! instr_addr [31:0] $end
    $var wire  1 Y! instr_gnt $end
    $var wire 128 R# instr_rdata [127:0] $end
    $var wire  1 X! instr_req $end
    $var wire  1 E instr_rvalid $end
    $var wire 32 G irq [0:31] $end
    $var wire  1 [! irq_ack $end
    $var wire  5 l* irq_id_in [0:4] $end
    $var wire  5 \! irq_id_out [0:4] $end
    $var wire  1 m* irq_sec $end
    $var wire  1 U* rst_ni $end
    $var wire  1 X* tests_failed_o $end
    $var wire  1 W* tests_passed_o $end
    $scope module cv32e40p_core_i $end
     $var wire 32 j* APU [31:0] $end
     $var wire 32 j* A_EXTENSION [31:0] $end
     $var wire 32 k* DEBUG_TRIGGER_EN [31:0] $end
     $var wire 32 j* FPU [31:0] $end
     $var wire 32 k* NUM_MHPMCOUNTERS [31:0] $end
     $var wire 32 w* N_HWLP [31:0] $end
     $var wire 32 k* N_HWLP_BITS [31:0] $end
     $var wire 32 v* N_PMP_ENTRIES [31:0] $end
     $var wire 32 j* PULP_CLUSTER [31:0] $end
     $var wire 32 j* PULP_OBI [31:0] $end
     $var wire 32 j* PULP_SECURE [31:0] $end
     $var wire 32 j* PULP_XPULP [31:0] $end
     $var wire 32 j* PULP_ZFINX [31:0] $end
     $var wire 32 j* USE_PMP [31:0] $end
     $var wire  2 |# alu_clpx_shift_ex [1:0] $end
     $var wire  1 r# alu_en_ex $end
     $var wire  1 z# alu_is_clpx_ex $end
     $var wire  1 {# alu_is_subrot_ex $end
     $var wire 32 t# alu_operand_a_ex [31:0] $end
     $var wire 32 u# alu_operand_b_ex [31:0] $end
     $var wire 32 m# alu_operand_c_ex [31:0] $end
     $var wire  7 s# alu_operator_ex [6:0] $end
     $var wire  2 y# alu_vec_mode_ex [1:0] $end
     $var wire  1 m* apu_busy $end
     $var wire  1 -$ apu_en_ex $end
     $var wire 15 ]# apu_flags_ex [14:0] $end
     $var wire  5 u* apu_flags_i [4:0] $end
     $var wire 15 ]# apu_flags_o [14:0] $end
     $var wire  1 m* apu_gnt_i $end
     $var wire  2 /$ apu_lat_ex [1:0] $end
     $var wire  6 .$ apu_op_ex [5:0] $end
     $var wire  6 t* apu_op_o [5:0] $end
     $var wire 96 0$ apu_operands_ex [95:0] $end
     $var wire 96 q* apu_operands_o [95:0] $end
     $var wire  1 m* apu_read_dep $end
     $var wire 18 y* apu_read_regs [17:0] $end
     $var wire  3 x* apu_read_regs_valid [2:0] $end
     $var wire  1 n* apu_ready_wb $end
     $var wire  1 m* apu_req_o $end
     $var wire 32 i* apu_result_i [31:0] $end
     $var wire  1 m* apu_rvalid_i $end
     $var wire  6 3$ apu_waddr_ex [5:0] $end
     $var wire  1 m* apu_write_dep $end
     $var wire 12 z* apu_write_regs [11:0] $end
     $var wire  2 {* apu_write_regs_valid [1:0] $end
     $var wire  5 v# bmask_a_ex [4:0] $end
     $var wire  5 w# bmask_b_ex [4:0] $end
     $var wire 32 g* boot_addr_i [31:0] $end
     $var wire  1 o# branch_decision $end
     $var wire  1 n# branch_in_ex $end
     $var wire  1 ]! clear_instr_valid $end
     $var wire  1 y! clk $end
     $var wire  1 T* clk_i $end
     $var wire  1 [* core_sleep_o $end
     $var wire  1 ;$ csr_access_ex $end
     $var wire 12 ?$ csr_addr [11:0] $end
     $var wire 12 ?$ csr_addr_int [11:0] $end
     $var wire  6 p! csr_cause [5:0] $end
     $var wire 32 i* csr_hwlp_data [31:0] $end
     $var wire  1 m* csr_hwlp_regid [0:0] $end
     $var wire  3 x* csr_hwlp_we [2:0] $end
     $var wire  1 l! csr_irq_sec $end
     $var wire  1 t! csr_mtvec_init $end
     $var wire  2 <$ csr_op [1:0] $end
     $var wire  2 <$ csr_op_ex [1:0] $end
     $var wire 32 @$ csr_rdata [31:0] $end
     $var wire  1 s! csr_restore_dret_id $end
     $var wire  1 q! csr_restore_mret_id $end
     $var wire  1 r! csr_restore_uret_id $end
     $var wire  1 m! csr_save_cause $end
     $var wire  1 m* csr_save_ex $end
     $var wire  1 o! csr_save_id $end
     $var wire  1 n! csr_save_if $end
     $var wire 32 t# csr_wdata [31:0] $end
     $var wire  1 e! ctrl_busy $end
     $var wire  2 }* current_priv_lvl [1:0] $end
     $var wire 32 Y# data_addr_o [31:0] $end
     $var wire 32 Y# data_addr_pmp [31:0] $end
     $var wire  6 a# data_atop_ex [5:0] $end
     $var wire  6 a# data_atop_o [5:0] $end
     $var wire  4 [# data_be_o [3:0] $end
     $var wire  1 m* data_err_ack $end
     $var wire  1 m* data_err_pmp $end
     $var wire  1 )* data_gnt_i $end
     $var wire  1 )* data_gnt_pmp $end
     $var wire  1 E$ data_load_event_ex $end
     $var wire  1 j# data_misaligned $end
     $var wire  1 F$ data_misaligned_ex $end
     $var wire 32 Z* data_rdata_i [31:0] $end
     $var wire  2 C$ data_reg_offset_ex [1:0] $end
     $var wire  1 D$ data_req_ex $end
     $var wire  1 X# data_req_o $end
     $var wire  1 X# data_req_pmp $end
     $var wire  1 Y* data_rvalid_i $end
     $var wire  2 B$ data_sign_ext_ex [1:0] $end
     $var wire  2 A$ data_type_ex [1:0] $end
     $var wire 32 \# data_wdata_o [31:0] $end
     $var wire  1 Z# data_we_ex $end
     $var wire  1 Z# data_we_o $end
     $var wire  3 u! debug_cause [2:0] $end
     $var wire  1 v! debug_csr_save $end
     $var wire  1 Q$ debug_ebreakm $end
     $var wire  1 R$ debug_ebreaku $end
     $var wire  1 `# debug_halted_o $end
     $var wire  1 ^# debug_havereset_o $end
     $var wire  1 O$ debug_mode $end
     $var wire  1 ]* debug_p_elw_no_sleep $end
     $var wire  1 F debug_req_i $end
     $var wire  1 _# debug_running_o $end
     $var wire  1 P$ debug_single_step $end
     $var wire 32 L$ depc [31:0] $end
     $var wire 32 p* dm_exception_addr_i [31:0] $end
     $var wire 32 h* dm_halt_addr_i [31:0] $end
     $var wire  1 i! ex_ready $end
     $var wire  1 k! ex_valid $end
     $var wire  5 b! exc_cause [4:0] $end
     $var wire  3 `! exc_pc_mux_id [2:0] $end
     $var wire  1 H fetch_enable $end
     $var wire  1 V* fetch_enable_i $end
     $var wire  5 u* fflags_csr [4:0] $end
     $var wire  1 m* fflags_we $end
     $var wire  3 x* frm_csr [2:0] $end
     $var wire  1 g! halt_if $end
     $var wire 32 i* hart_id_i [31:0] $end
     $var wire 64 $+ hwlp_cnt [63:0] $end
     $var wire 64 "+ hwlp_end [63:0] $end
     $var wire  1 m* hwlp_jump $end
     $var wire 64 ~* hwlp_start [63:0] $end
     $var wire 32 i* hwlp_target [31:0] $end
     $var wire  1 h! id_ready $end
     $var wire  1 j! id_valid $end
     $var wire  1 0# if_busy $end
     $var wire  1 e# illegal_c_insn_id $end
     $var wire  2 x# imm_vec_ext_ex [1:0] $end
     $var wire 32 Z! instr_addr_o [31:0] $end
     $var wire 32 Z! instr_addr_pmp [31:0] $end
     $var wire  1 m* instr_err_pmp $end
     $var wire  1 Y! instr_gnt_i $end
     $var wire  1 Y! instr_gnt_pmp $end
     $var wire 32 V# instr_rdata_i [31:0] $end
     $var wire 32 c# instr_rdata_id [31:0] $end
     $var wire  1 H$ instr_req_int $end
     $var wire  1 X! instr_req_o $end
     $var wire  1 X! instr_req_pmp $end
     $var wire  1 E instr_rvalid_i $end
     $var wire  1 b# instr_valid_id $end
     $var wire  1 [! irq_ack_o $end
     $var wire 32 i* irq_i [31:0] $end
     $var wire  5 \! irq_id_o [4:0] $end
     $var wire  1 m* irq_sec_i $end
     $var wire  1 d# is_compressed_id $end
     $var wire  1 d! is_decoding $end
     $var wire  1 f# is_fetch_failed_id $end
     $var wire 32 m# jump_target_ex [31:0] $end
     $var wire 32 l# jump_target_id [31:0] $end
     $var wire  1 p# lsu_busy $end
     $var wire 32 ** lsu_rdata [31:0] $end
     $var wire  1 ,* lsu_ready_ex $end
     $var wire  1 +* lsu_ready_wb $end
     $var wire  5 a! m_exc_vec_pc_mux_id [4:0] $end
     $var wire  1 I$ m_irq_enable $end
     $var wire 32 i* mcounteren [31:0] $end
     $var wire 32 K$ mepc [31:0] $end
     $var wire  1 X$ mhpmevent_branch $end
     $var wire  1 Y$ mhpmevent_branch_taken $end
     $var wire  1 Z$ mhpmevent_compressed $end
     $var wire  1 \$ mhpmevent_imiss $end
     $var wire  1 [$ mhpmevent_jr_stall $end
     $var wire  1 W$ mhpmevent_jump $end
     $var wire  1 ]$ mhpmevent_ld_stall $end
     $var wire  1 U$ mhpmevent_load $end
     $var wire  1 T$ mhpmevent_minstret $end
     $var wire  1 ^$ mhpmevent_pipe_stall $end
     $var wire  1 V$ mhpmevent_store $end
     $var wire 32 M$ mie_bypass [31:0] $end
     $var wire 32 N$ mip [31:0] $end
     $var wire 24 =$ mtvec [23:0] $end
     $var wire 32 o* mtvec_addr_i [31:0] $end
     $var wire  2 >$ mtvec_mode [1:0] $end
     $var wire  1 +$ mult_clpx_img_ex $end
     $var wire  2 ,$ mult_clpx_shift_ex [1:0] $end
     $var wire 32 '$ mult_dot_op_a_ex [31:0] $end
     $var wire 32 ($ mult_dot_op_b_ex [31:0] $end
     $var wire 32 )$ mult_dot_op_c_ex [31:0] $end
     $var wire  2 *$ mult_dot_signed_ex [1:0] $end
     $var wire  1 #$ mult_en_ex $end
     $var wire  5 &$ mult_imm_ex [4:0] $end
     $var wire  1 +$ mult_is_clpx_ex $end
     $var wire  1 k# mult_multicycle $end
     $var wire 32 ~# mult_operand_a_ex [31:0] $end
     $var wire 32 !$ mult_operand_b_ex [31:0] $end
     $var wire 32 "$ mult_operand_c_ex [31:0] $end
     $var wire  3 }# mult_operator_ex [2:0] $end
     $var wire  1 $$ mult_sel_subword_ex $end
     $var wire  2 %$ mult_signed_mode_ex [1:0] $end
     $var wire  1 \* p_elw_finish $end
     $var wire  1 G$ p_elw_start $end
     $var wire 32 q# pc_ex [31:0] $end
     $var wire 32 h# pc_id [31:0] $end
     $var wire 32 g# pc_if [31:0] $end
     $var wire  4 _! pc_mux_id [3:0] $end
     $var wire  1 ^! pc_set $end
     $var wire  1 m* perf_apu_cont $end
     $var wire  1 m* perf_apu_dep $end
     $var wire  1 m* perf_apu_type $end
     $var wire  1 m* perf_apu_wb $end
     $var wire  1 w! perf_imiss $end
     $var wire 512 &+ pmp_addr [511:0] $end
     $var wire 128 6+ pmp_cfg [127:0] $end
     $var wire  1 n* pulp_clock_en_i $end
     $var wire  6 8$ regfile_alu_waddr_ex [5:0] $end
     $var wire  6 8$ regfile_alu_waddr_fw [5:0] $end
     $var wire 32 f! regfile_alu_wdata_fw [31:0] $end
     $var wire  1 9$ regfile_alu_we_ex $end
     $var wire  1 :$ regfile_alu_we_fw $end
     $var wire  6 4$ regfile_waddr_ex [5:0] $end
     $var wire  6 6$ regfile_waddr_fw_wb_o [5:0] $end
     $var wire 32 ** regfile_wdata [31:0] $end
     $var wire  1 5$ regfile_we_ex $end
     $var wire  1 7$ regfile_we_wb $end
     $var wire  1 U* rst_ni $end
     $var wire  1 m* scan_cg_en_i $end
     $var wire  1 n* sec_lvl_o $end
     $var wire  2 c! trap_addr_mux [1:0] $end
     $var wire  1 S$ trigger_match $end
     $var wire  5 u* u_exc_vec_pc_mux_id [4:0] $end
     $var wire  1 J$ u_irq_enable $end
     $var wire 32 i* uepc [31:0] $end
     $var wire  1 i# useincr_addr_ex $end
     $var wire 24 |* utvec [23:0] $end
     $var wire  2 {* utvec_mode [1:0] $end
     $var wire  1 x! wake_from_sleep $end
     $var wire  1 +* wb_valid $end
     $scope module cs_registers_i $end
      $var wire 32 j* APU [31:0] $end
      $var wire 32 j* A_EXTENSION [31:0] $end
      $var wire 32 k* DEBUG_TRIGGER_EN [31:0] $end
      $var wire 32 j* FPU [31:0] $end
      $var wire 32 O+ MAX_N_PMP_CFG [31:0] $end
      $var wire 32 v* MAX_N_PMP_ENTRIES [31:0] $end
      $var wire 32 X+ MHPMCOUNTER_WIDTH [31:0] $end
      $var wire 32 W+ MISA_VALUE [31:0] $end
      $var wire 32 P+ MSTATUS_MIE_BIT [31:0] $end
      $var wire 32 R+ MSTATUS_MPIE_BIT [31:0] $end
      $var wire 32 T+ MSTATUS_MPP_BIT_HIGH [31:0] $end
      $var wire 32 U+ MSTATUS_MPP_BIT_LOW [31:0] $end
      $var wire 32 V+ MSTATUS_MPRV_BIT [31:0] $end
      $var wire 32 k* MSTATUS_SIE_BIT [31:0] $end
      $var wire 32 Q+ MSTATUS_SPIE_BIT [31:0] $end
      $var wire 32 S+ MSTATUS_SPP_BIT [31:0] $end
      $var wire 32 j* MSTATUS_UIE_BIT [31:0] $end
      $var wire 32 O+ MSTATUS_UPIE_BIT [31:0] $end
      $var wire  2 N+ MTVEC_MODE [1:0] $end
      $var wire  2 N+ MXL [1:0] $end
      $var wire 32 v* NUM_HPM_EVENTS [31:0] $end
      $var wire 32 k* NUM_MHPMCOUNTERS [31:0] $end
      $var wire 32 w* N_HWLP [31:0] $end
      $var wire 32 k* N_HWLP_BITS [31:0] $end
      $var wire 32 O+ N_PMP_CFG [31:0] $end
      $var wire 32 v* N_PMP_ENTRIES [31:0] $end
      $var wire 32 j* PULP_CLUSTER [31:0] $end
      $var wire 32 j* PULP_PERF_COUNTERS [31:0] $end
      $var wire 32 j* PULP_SECURE [31:0] $end
      $var wire 32 j* PULP_XPULP [31:0] $end
      $var wire 32 j* USE_PMP [31:0] $end
      $var wire  1 m* apu_contention_i $end
      $var wire  1 m* apu_dep_i $end
      $var wire  1 m* apu_typeconflict_i $end
      $var wire  1 m* apu_wb_i $end
      $var wire  1 y! clk $end
      $var wire 12 ?$ csr_addr_i [11:0] $end
      $var wire  6 p! csr_cause_i [5:0] $end
      $var wire  1 l! csr_irq_sec_i $end
      $var wire 32 s$ csr_mie_wdata [31:0] $end
      $var wire  1 t$ csr_mie_we $end
      $var wire  1 t! csr_mtvec_init_i $end
      $var wire  2 <$ csr_op_i [1:0] $end
      $var wire 32 @$ csr_rdata_int [31:0] $end
      $var wire 32 @$ csr_rdata_o [31:0] $end
      $var wire  1 s! csr_restore_dret_i $end
      $var wire  1 q! csr_restore_mret_i $end
      $var wire  1 r! csr_restore_uret_i $end
      $var wire  1 m! csr_save_cause_i $end
      $var wire  1 m* csr_save_ex_i $end
      $var wire  1 o! csr_save_id_i $end
      $var wire  1 n! csr_save_if_i $end
      $var wire 32 t# csr_wdata_i [31:0] $end
      $var wire 32 _$ csr_wdata_int [31:0] $end
      $var wire  1 `$ csr_we_int $end
      $var wire 32 {! dcsr_n [31:0] $end
      $var wire 32 g$ dcsr_q [31:0] $end
      $var wire  3 u! debug_cause_i [2:0] $end
      $var wire  1 v! debug_csr_save_i $end
      $var wire  1 Q$ debug_ebreakm_o $end
      $var wire  1 R$ debug_ebreaku_o $end
      $var wire  1 O$ debug_mode_i $end
      $var wire  1 P$ debug_single_step_o $end
      $var wire 32 |! depc_n [31:0] $end
      $var wire 32 L$ depc_o [31:0] $end
      $var wire 32 L$ depc_q [31:0] $end
      $var wire 32 i$ dscratch0_n [31:0] $end
      $var wire 32 h$ dscratch0_q [31:0] $end
      $var wire 32 k$ dscratch1_n [31:0] $end
      $var wire 32 j$ dscratch1_q [31:0] $end
      $var wire 32 }! exception_pc [31:0] $end
      $var wire  5 u* fflags_i [4:0] $end
      $var wire  5 d$ fflags_n [4:0] $end
      $var wire  5 c$ fflags_q [4:0] $end
      $var wire  1 m* fflags_we_i $end
      $var wire  3 b$ frm_n [2:0] $end
      $var wire  3 x* frm_o [2:0] $end
      $var wire  3 a$ frm_q [2:0] $end
      $var wire 32 i* hart_id_i [31:0] $end
      $var wire 16 ;& hpm_events [15:0] $end
      $var wire 64 $+ hwlp_cnt_i [63:0] $end
      $var wire 32 i* hwlp_data_o [31:0] $end
      $var wire 64 "+ hwlp_end_i [63:0] $end
      $var wire  1 m* hwlp_regid_o [0:0] $end
      $var wire 64 ~* hwlp_start_i [63:0] $end
      $var wire  3 x* hwlp_we_o [2:0] $end
      $var wire  1 #" is_irq $end
      $var wire  1 I$ m_irq_enable_o $end
      $var wire  6 !" mcause_n [5:0] $end
      $var wire  6 o$ mcause_q [5:0] $end
      $var wire 32 i* mcounteren_n [31:0] $end
      $var wire 32 i* mcounteren_o [31:0] $end
      $var wire 32 i* mcounteren_q [31:0] $end
      $var wire  1 !' mcounteren_we $end
      $var wire 32 :& mcountinhibit_n [31:0] $end
      $var wire 32 9& mcountinhibit_q [31:0] $end
      $var wire  1 "' mcountinhibit_we $end
      $var wire 32 z! mepc_n [31:0] $end
      $var wire 32 K$ mepc_o [31:0] $end
      $var wire 32 K$ mepc_q [31:0] $end
      $var wire 2048 <& mhpmcounter_increment [2047:0] $end
      $var wire 2048 u$ mhpmcounter_q [2047:0] $end
      $var wire 32 ~& mhpmcounter_write_increment [31:0] $end
      $var wire 32 |& mhpmcounter_write_lower [31:0] $end
      $var wire 32 }& mhpmcounter_write_upper [31:0] $end
      $var wire  1 X$ mhpmevent_branch_i $end
      $var wire  1 Y$ mhpmevent_branch_taken_i $end
      $var wire  1 Z$ mhpmevent_compressed_i $end
      $var wire  1 \$ mhpmevent_imiss_i $end
      $var wire  1 [$ mhpmevent_jr_stall_i $end
      $var wire  1 W$ mhpmevent_jump_i $end
      $var wire  1 ]$ mhpmevent_ld_stall_i $end
      $var wire  1 U$ mhpmevent_load_i $end
      $var wire  1 T$ mhpmevent_minstret_i $end
      $var wire 1024 w% mhpmevent_n [1023:0] $end
      $var wire  1 ^$ mhpmevent_pipe_stall_i $end
      $var wire 1024 W% mhpmevent_q [1023:0] $end
      $var wire  1 V$ mhpmevent_store_i $end
      $var wire  1 #' mhpmevent_we $end
      $var wire 32 M$ mie_bypass_o [31:0] $end
      $var wire 32 r$ mie_n [31:0] $end
      $var wire 32 q$ mie_q [31:0] $end
      $var wire 32 N$ mip [31:0] $end
      $var wire 32 N$ mip_i [31:0] $end
      $var wire 32 m$ mscratch_n [31:0] $end
      $var wire 32 l$ mscratch_q [31:0] $end
      $var wire  7 ~! mstatus_n [6:0] $end
      $var wire  7 n$ mstatus_q [6:0] $end
      $var wire 32 o* mtvec_addr_i [31:0] $end
      $var wire  2 p$ mtvec_mode_n [1:0] $end
      $var wire  2 >$ mtvec_mode_o [1:0] $end
      $var wire  2 >$ mtvec_mode_q [1:0] $end
      $var wire 24 "" mtvec_n [23:0] $end
      $var wire 24 =$ mtvec_o [23:0] $end
      $var wire 24 =$ mtvec_q [23:0] $end
      $var wire 32 q# pc_ex_i [31:0] $end
      $var wire 32 h# pc_id_i [31:0] $end
      $var wire 32 g# pc_if_i [31:0] $end
      $var wire 512 :+ pmp_addr_o [511:0] $end
      $var wire 128 J+ pmp_cfg_o [127:0] $end
      $var wire 768 [+ pmp_reg_n [767:0] $end
      $var wire 768 [+ pmp_reg_q [767:0] $end
      $var wire 16 s+ pmpaddr_we [15:0] $end
      $var wire 16 s+ pmpcfg_we [15:0] $end
      $var wire  2 $" priv_lvl_n [1:0] $end
      $var wire  2 }* priv_lvl_o [1:0] $end
      $var wire  2 Z+ priv_lvl_q [1:0] $end
      $var wire  1 U* rst_n $end
      $var wire  1 n* sec_lvl_o $end
      $var wire 16 Y+ tinfo_types [15:0] $end
      $var wire 32 e$ tmatch_control_rdata [31:0] $end
      $var wire 32 f$ tmatch_value_rdata [31:0] $end
      $var wire  1 S$ trigger_match_o $end
      $var wire  1 J$ u_irq_enable_o $end
      $var wire  6 t* ucause_n [5:0] $end
      $var wire  6 t* ucause_q [5:0] $end
      $var wire 32 i* uepc_n [31:0] $end
      $var wire 32 i* uepc_o [31:0] $end
      $var wire 32 i* uepc_q [31:0] $end
      $var wire  2 {* utvec_mode_n [1:0] $end
      $var wire  2 {* utvec_mode_o [1:0] $end
      $var wire  2 {* utvec_mode_q [1:0] $end
      $var wire 24 |* utvec_n [23:0] $end
      $var wire 24 |* utvec_o [23:0] $end
      $var wire 24 |* utvec_q [23:0] $end
      $scope module gen_trigger_regs $end
       $var wire  1 $' tmatch_control_exec_q $end
       $var wire  1 %' tmatch_control_we $end
       $var wire 32 f$ tmatch_value_q [31:0] $end
       $var wire  1 &' tmatch_value_we $end
      $upscope $end
     $upscope $end
     $scope module ex_stage_i $end
      $var wire 32 P+ APU_NARGS_CPU [31:0] $end
      $var wire 32 u+ APU_NDSFLAGS_CPU [31:0] $end
      $var wire 32 Q+ APU_NUSFLAGS_CPU [31:0] $end
      $var wire 32 t+ APU_WOP_CPU [31:0] $end
      $var wire 32 j* FPU [31:0] $end
      $var wire  2 |# alu_clpx_shift_i [1:0] $end
      $var wire  1 o# alu_cmp_result $end
      $var wire  1 r# alu_en_i $end
      $var wire  1 z# alu_is_clpx_i $end
      $var wire  1 {# alu_is_subrot_i $end
      $var wire 32 t# alu_operand_a_i [31:0] $end
      $var wire 32 u# alu_operand_b_i [31:0] $end
      $var wire 32 m# alu_operand_c_i [31:0] $end
      $var wire  7 s# alu_operator_i [6:0] $end
      $var wire  1 '" alu_ready $end
      $var wire 32 %" alu_result [31:0] $end
      $var wire  2 y# alu_vec_mode_i [1:0] $end
      $var wire  1 m* apu_active $end
      $var wire  1 m* apu_busy_o $end
      $var wire  1 -$ apu_en_i $end
      $var wire 15 ]# apu_flags_i [14:0] $end
      $var wire  1 m* apu_gnt $end
      $var wire  1 m* apu_gnt_i $end
      $var wire  2 /$ apu_lat_i [1:0] $end
      $var wire  1 m* apu_multicycle $end
      $var wire  6 .$ apu_op_i [5:0] $end
      $var wire  6 t* apu_op_o [5:0] $end
      $var wire 96 0$ apu_operands_i [95:0] $end
      $var wire 96 q* apu_operands_o [95:0] $end
      $var wire  1 m* apu_perf_cont_o $end
      $var wire  1 m* apu_perf_type_o $end
      $var wire  1 m* apu_perf_wb_o $end
      $var wire  1 m* apu_read_dep_o $end
      $var wire 18 y* apu_read_regs_i [17:0] $end
      $var wire  3 x* apu_read_regs_valid_i [2:0] $end
      $var wire  1 n* apu_ready_wb_o $end
      $var wire  1 m* apu_req $end
      $var wire  1 m* apu_req_o $end
      $var wire 32 i* apu_result [31:0] $end
      $var wire 32 i* apu_result_i [31:0] $end
      $var wire  1 m* apu_rvalid_i $end
      $var wire  1 m* apu_singlecycle $end
      $var wire  1 m* apu_stall $end
      $var wire  1 m* apu_valid $end
      $var wire  6 t* apu_waddr [5:0] $end
      $var wire  6 3$ apu_waddr_i [5:0] $end
      $var wire  1 m* apu_write_dep_o $end
      $var wire 12 z* apu_write_regs_i [11:0] $end
      $var wire  2 {* apu_write_regs_valid_i [1:0] $end
      $var wire  5 v# bmask_a_i [4:0] $end
      $var wire  5 w# bmask_b_i [4:0] $end
      $var wire  1 o# branch_decision_o $end
      $var wire  1 n# branch_in_ex_i $end
      $var wire  1 y! clk $end
      $var wire  1 ;$ csr_access_i $end
      $var wire 32 @$ csr_rdata_i [31:0] $end
      $var wire  1 i! ex_ready_o $end
      $var wire  1 k! ex_valid_o $end
      $var wire  1 m* fpu_fflags_we_o $end
      $var wire  2 x# imm_vec_ext_i [1:0] $end
      $var wire  1 d! is_decoding_i $end
      $var wire 32 m# jump_target_o [31:0] $end
      $var wire  1 D$ lsu_en_i $end
      $var wire  1 m* lsu_err_i $end
      $var wire 32 ** lsu_rdata_i [31:0] $end
      $var wire  1 ,* lsu_ready_ex_i $end
      $var wire  1 +$ mult_clpx_img_i $end
      $var wire  2 ,$ mult_clpx_shift_i [1:0] $end
      $var wire 32 '$ mult_dot_op_a_i [31:0] $end
      $var wire 32 ($ mult_dot_op_b_i [31:0] $end
      $var wire 32 )$ mult_dot_op_c_i [31:0] $end
      $var wire  2 *$ mult_dot_signed_i [1:0] $end
      $var wire  1 #$ mult_en_i $end
      $var wire  5 &$ mult_imm_i [4:0] $end
      $var wire  1 +$ mult_is_clpx_i $end
      $var wire  1 k# mult_multicycle_o $end
      $var wire 32 ~# mult_operand_a_i [31:0] $end
      $var wire 32 !$ mult_operand_b_i [31:0] $end
      $var wire 32 "$ mult_operand_c_i [31:0] $end
      $var wire  3 }# mult_operator_i [2:0] $end
      $var wire  1 (' mult_ready $end
      $var wire 32 &" mult_result [31:0] $end
      $var wire  1 $$ mult_sel_subword_i $end
      $var wire  2 %$ mult_signed_mode_i [1:0] $end
      $var wire  6 8$ regfile_alu_waddr_fw_o [5:0] $end
      $var wire  6 8$ regfile_alu_waddr_i [5:0] $end
      $var wire 32 f! regfile_alu_wdata_fw_o [31:0] $end
      $var wire  1 :$ regfile_alu_we_fw_o $end
      $var wire  1 9$ regfile_alu_we_i $end
      $var wire  6 4$ regfile_waddr_i [5:0] $end
      $var wire  6 6$ regfile_waddr_lsu [5:0] $end
      $var wire  6 6$ regfile_waddr_wb_o [5:0] $end
      $var wire 32 ** regfile_wdata_wb_o [31:0] $end
      $var wire  1 5$ regfile_we_i $end
      $var wire  1 '' regfile_we_lsu $end
      $var wire  1 7$ regfile_we_wb_o $end
      $var wire  1 U* rst_n $end
      $var wire  1 m* wb_contention $end
      $var wire  1 m* wb_contention_lsu $end
      $var wire  1 +* wb_ready_i $end
      $scope module alu_i $end
       $var wire 36 2' adder_in_a [35:0] $end
       $var wire 36 4' adder_in_b [35:0] $end
       $var wire 32 0' adder_op_a [31:0] $end
       $var wire 32 1' adder_op_b [31:0] $end
       $var wire  1 /' adder_op_b_negate $end
       $var wire 32 6' adder_result [31:0] $end
       $var wire 37 7' adder_result_expanded [36:0] $end
       $var wire 32 :' adder_round_result [31:0] $end
       $var wire 32 9' adder_round_value [31:0] $end
       $var wire 32 `' bclr_result [31:0] $end
       $var wire 32 6# bextins_and [31:0] $end
       $var wire 32 0" bextins_result [31:0] $end
       $var wire  6 /" bitop_result [5:0] $end
       $var wire 32 .' bmask [31:0] $end
       $var wire  5 v# bmask_a_i [4:0] $end
       $var wire  5 w# bmask_b_i [4:0] $end
       $var wire 32 ^' bmask_first [31:0] $end
       $var wire 32 _' bmask_inv [31:0] $end
       $var wire 32 a' bset_result [31:0] $end
       $var wire  6 1# clb_result [5:0] $end
       $var wire 32 O' clip_result [31:0] $end
       $var wire  1 y! clk $end
       $var wire 16 @' clpx_shift_ex [15:0] $end
       $var wire  2 |# clpx_shift_i [1:0] $end
       $var wire  4 J' cmp_result [3:0] $end
       $var wire  4 E' cmp_signed [3:0] $end
       $var wire  6 \' cnt_result [5:0] $end
       $var wire  1 o# comparison_result_o $end
       $var wire  1 e' div_op_a_signed $end
       $var wire  1 '" div_ready $end
       $var wire  6 (" div_shift [5:0] $end
       $var wire  6 8# div_shift_int [5:0] $end
       $var wire  1 d' div_signed $end
       $var wire  1 -' div_valid $end
       $var wire  1 M' do_min $end
       $var wire  1 r# enable_i $end
       $var wire  1 i! ex_ready_i $end
       $var wire  1 ]' extract_is_signed $end
       $var wire  1 5# extract_sign $end
       $var wire  5 2# ff1_result [4:0] $end
       $var wire 32 [' ff_input [31:0] $end
       $var wire  1 3# ff_no_one $end
       $var wire  5 4# fl1_result [4:0] $end
       $var wire  2 x# imm_vec_ext_i [1:0] $end
       $var wire  1 z# is_clpx_i $end
       $var wire  4 C' is_equal [3:0] $end
       $var wire  1 I' is_equal_clip $end
       $var wire  4 F' is_equal_vec [3:0] $end
       $var wire  4 D' is_greater [3:0] $end
       $var wire  4 G' is_greater_vec [3:0] $end
       $var wire  1 {# is_subrot_i $end
       $var wire 32 N' minmax_b [31:0] $end
       $var wire 32 t# operand_a_i [31:0] $end
       $var wire 32 *' operand_a_neg [31:0] $end
       $var wire 32 +' operand_a_neg_rev [31:0] $end
       $var wire 32 )' operand_a_rev [31:0] $end
       $var wire 32 H' operand_b_eq [31:0] $end
       $var wire 32 u# operand_b_i [31:0] $end
       $var wire 32 ,' operand_b_neg [31:0] $end
       $var wire 32 m# operand_c_i [31:0] $end
       $var wire  7 s# operator_i [6:0] $end
       $var wire 32 Z' pack_result [31:0] $end
       $var wire 32 1" radix_2_rev [31:0] $end
       $var wire 32 2" radix_4_rev [31:0] $end
       $var wire 32 3" radix_8_rev [31:0] $end
       $var wire  2 b' radix_mux_sel [1:0] $end
       $var wire  1 '" ready_o $end
       $var wire 32 c' result_div [31:0] $end
       $var wire 32 K' result_minmax [31:0] $end
       $var wire 32 %" result_o [31:0] $end
       $var wire 32 7# reverse_result [31:0] $end
       $var wire  1 U* rst_n $end
       $var wire  4 L' sel_minmax [3:0] $end
       $var wire 32 *" shift_amt [31:0] $end
       $var wire 32 +" shift_amt_int [31:0] $end
       $var wire 32 )" shift_amt_left [31:0] $end
       $var wire 32 >' shift_amt_norm [31:0] $end
       $var wire  1 =' shift_arithmetic $end
       $var wire  1 ;' shift_left $end
       $var wire 32 ." shift_left_result [31:0] $end
       $var wire 32 ?' shift_op_a [31:0] $end
       $var wire 64 A' shift_op_a_32 [63:0] $end
       $var wire 32 ," shift_result [31:0] $end
       $var wire 32 -" shift_right_result [31:0] $end
       $var wire  1 <' shift_use_round $end
       $var wire  8 P' shuffle_byte_sel [7:0] $end
       $var wire 32 V' shuffle_r0 [31:0] $end
       $var wire 32 X' shuffle_r0_in [31:0] $end
       $var wire 32 U' shuffle_r1 [31:0] $end
       $var wire 32 W' shuffle_r1_in [31:0] $end
       $var wire  2 S' shuffle_reg0_sel [1:0] $end
       $var wire  2 R' shuffle_reg1_sel [1:0] $end
       $var wire  4 Q' shuffle_reg_sel [3:0] $end
       $var wire 32 Y' shuffle_result [31:0] $end
       $var wire  4 T' shuffle_through [3:0] $end
       $var wire  2 y# vector_mode_i [1:0] $end
       $scope module alu_div_i $end
        $var wire  1 r' ABComp_S $end
        $var wire  1 6" ARegEn_S $end
        $var wire 32 :# AReg_DN [31:0] $end
        $var wire 32 j' AReg_DP [31:0] $end
        $var wire 32 4" AddMux_D [31:0] $end
        $var wire 32 ?# AddOut_D [31:0] $end
        $var wire 32 5" AddTmp_D [31:0] $end
        $var wire 32 @# BMux_D [31:0] $end
        $var wire  1 7" BRegEn_S $end
        $var wire 32 ;# BReg_DN [31:0] $end
        $var wire 32 k' BReg_DP [31:0] $end
        $var wire 32 t+ C_LOG_WIDTH [31:0] $end
        $var wire 32 v+ C_WIDTH [31:0] $end
        $var wire  1 y! Clk_CI $end
        $var wire  1 q' CntZero_S $end
        $var wire  6 A# Cnt_DN [5:0] $end
        $var wire  6 p' Cnt_DP [5:0] $end
        $var wire  1 =# CompInv_SN $end
        $var wire  1 m' CompInv_SP $end
        $var wire  1 -' InVld_SI $end
        $var wire  1 9" LoadEn_S $end
        $var wire 32 u# OpA_DI [31:0] $end
        $var wire  1 f' OpBIsZero_SI $end
        $var wire  6 (" OpBShift_DI [5:0] $end
        $var wire  1 e' OpBSign_SI $end
        $var wire 32 ." OpB_DI [31:0] $end
        $var wire  2 g' OpCode_SI [1:0] $end
        $var wire 32 o' OutMux_D [31:0] $end
        $var wire  1 i! OutRdy_SI $end
        $var wire  1 '" OutVld_SO $end
        $var wire  1 B# PmSel_S $end
        $var wire  1 <# RemSel_SN $end
        $var wire  1 l' RemSel_SP $end
        $var wire  1 ># ResInv_SN $end
        $var wire  1 n' ResInv_SP $end
        $var wire  1 8" ResRegEn_S $end
        $var wire 32 9# ResReg_DN [31:0] $end
        $var wire 32 h' ResReg_DP [31:0] $end
        $var wire 32 i' ResReg_DP_rev [31:0] $end
        $var wire 32 c' Res_DO [31:0] $end
        $var wire  1 U* Rst_RBI $end
        $var wire  2 :" State_SN [1:0] $end
        $var wire  2 s' State_SP [1:0] $end
       $upscope $end
       $scope module ff_one_i $end
        $var wire 32 v+ LEN [31:0] $end
        $var wire 32 Q+ NUM_LEVELS [31:0] $end
        $var wire  5 2# first_one_o [4:0] $end
        $var wire 32 [' in_i [31:0] $end
        $var wire 160 w+ index_lut [159:0] $end
        $var wire 160 D# index_nodes [159:0] $end
        $var wire  1 3# no_ones_o $end
        $var wire 32 C# sel_nodes [31:0] $end
       $upscope $end
       $scope module popcnt_i $end
        $var wire 32 t' cnt_l1 [31:0] $end
        $var wire 24 u' cnt_l2 [23:0] $end
        $var wire 16 v' cnt_l3 [15:0] $end
        $var wire 10 w' cnt_l4 [9:0] $end
        $var wire 32 t# in_i [31:0] $end
        $var wire  6 \' result_o [5:0] $end
       $upscope $end
      $upscope $end
      $scope module mult_i $end
       $var wire 32 2( accumulator [31:0] $end
       $var wire  1 y! clk $end
       $var wire  1 +$ clpx_img_i $end
       $var wire  2 ,$ clpx_shift_i [1:0] $end
       $var wire 16 3( clpx_shift_result [15:0] $end
       $var wire 72 8( dot_char_mul [71:0] $end
       $var wire 36 4( dot_char_op_a [35:0] $end
       $var wire 36 6( dot_char_op_b [35:0] $end
       $var wire 32 /( dot_char_result [31:0] $end
       $var wire 32 '$ dot_op_a_i [31:0] $end
       $var wire 32 ($ dot_op_b_i [31:0] $end
       $var wire 32 )$ dot_op_c_i [31:0] $end
       $var wire 68 ?( dot_short_mul [67:0] $end
       $var wire 34 ;( dot_short_op_a [33:0] $end
       $var wire 17 B( dot_short_op_a_1_neg [16:0] $end
       $var wire 34 =( dot_short_op_b [33:0] $end
       $var wire 32 C( dot_short_op_b_ext [31:0] $end
       $var wire 33 0( dot_short_result [32:0] $end
       $var wire  2 *$ dot_signed_i [1:0] $end
       $var wire  1 #$ enable_i $end
       $var wire  1 i! ex_ready_i $end
       $var wire  5 &$ imm_i [4:0] $end
       $var wire  1 .( int_is_msu $end
       $var wire 32 +( int_op_a_msu [31:0] $end
       $var wire 32 ,( int_op_b_msu [31:0] $end
       $var wire 32 -( int_result [31:0] $end
       $var wire  1 +$ is_clpx_i $end
       $var wire  3 *( mulh_CS [2:0] $end
       $var wire  3 ?" mulh_NS [2:0] $end
       $var wire  1 '( mulh_active $end
       $var wire  1 &( mulh_carry_q $end
       $var wire  1 )( mulh_clearcarry $end
       $var wire  5 "( mulh_imm [4:0] $end
       $var wire  1 (' mulh_ready $end
       $var wire  1 (( mulh_save $end
       $var wire  1 %( mulh_shift_arith $end
       $var wire  2 $( mulh_signed [1:0] $end
       $var wire  2 #( mulh_subword [1:0] $end
       $var wire  1 k# multicycle_o $end
       $var wire 32 ~# op_a_i [31:0] $end
       $var wire 32 !$ op_b_i [31:0] $end
       $var wire 32 "$ op_c_i [31:0] $end
       $var wire  3 }# operator_i [2:0] $end
       $var wire  1 (' ready_o $end
       $var wire 32 &" result_o [31:0] $end
       $var wire  1 U* rst_n $end
       $var wire  5 |' short_imm [4:0] $end
       $var wire 34 ;" short_mac [33:0] $end
       $var wire  1 N# short_mac_msb0 $end
       $var wire  1 M# short_mac_msb1 $end
       $var wire 34 K# short_mul [33:0] $end
       $var wire 17 I# short_op_a [16:0] $end
       $var wire 17 J# short_op_b [16:0] $end
       $var wire 33 x' short_op_c [32:0] $end
       $var wire 34 =" short_result [33:0] $end
       $var wire 32 z' short_round [31:0] $end
       $var wire 32 {' short_round_tmp [31:0] $end
       $var wire  1 !( short_shift_arith $end
       $var wire  2 ~' short_signed [1:0] $end
       $var wire  2 %$ short_signed_i [1:0] $end
       $var wire  2 }' short_subword [1:0] $end
       $var wire  1 $$ short_subword_i $end
      $upscope $end
     $upscope $end
     $scope module id_stage_i $end
      $var wire 32 j* APU [31:0] $end
      $var wire 32 P+ APU_NARGS_CPU [31:0] $end
      $var wire 32 u+ APU_NDSFLAGS_CPU [31:0] $end
      $var wire 32 Q+ APU_NUSFLAGS_CPU [31:0] $end
      $var wire 32 t+ APU_WOP_CPU [31:0] $end
      $var wire 32 j* A_EXTENSION [31:0] $end
      $var wire 32 k* DEBUG_TRIGGER_EN [31:0] $end
      $var wire 32 j* FPU [31:0] $end
      $var wire 32 w* N_HWLP [31:0] $end
      $var wire 32 k* N_HWLP_BITS [31:0] $end
      $var wire 32 j* PULP_CLUSTER [31:0] $end
      $var wire 32 j* PULP_SECURE [31:0] $end
      $var wire 32 j* PULP_XPULP [31:0] $end
      $var wire 32 j* PULP_ZFINX [31:0] $end
      $var wire 32 R+ REG_D_LSB [31:0] $end
      $var wire 32 U+ REG_D_MSB [31:0] $end
      $var wire 32 u+ REG_S1_LSB [31:0] $end
      $var wire 32 |+ REG_S1_MSB [31:0] $end
      $var wire 32 ~+ REG_S2_LSB [31:0] $end
      $var wire 32 }+ REG_S2_MSB [31:0] $end
      $var wire 32 ", REG_S4_LSB [31:0] $end
      $var wire 32 !, REG_S4_MSB [31:0] $end
      $var wire 32 j* USE_PMP [31:0] $end
      $var wire  1 (, alu_bmask_a_mux_sel $end
      $var wire  1 (, alu_bmask_b_mux_sel $end
      $var wire  2 |# alu_clpx_shift_ex_o [1:0] $end
      $var wire  1 J" alu_en $end
      $var wire  1 r# alu_en_ex_o $end
      $var wire  1 z# alu_is_clpx_ex_o $end
      $var wire  1 {# alu_is_subrot_ex_o $end
      $var wire  3 m( alu_op_a_mux_sel [2:0] $end
      $var wire  3 L" alu_op_b_mux_sel [2:0] $end
      $var wire  2 n( alu_op_c_mux_sel [1:0] $end
      $var wire 32 Z" alu_operand_a [31:0] $end
      $var wire 32 t# alu_operand_a_ex_o [31:0] $end
      $var wire 32 V" alu_operand_b [31:0] $end
      $var wire 32 u# alu_operand_b_ex_o [31:0] $end
      $var wire 32 X" alu_operand_c [31:0] $end
      $var wire 32 m# alu_operand_c_ex_o [31:0] $end
      $var wire  7 K" alu_operator [6:0] $end
      $var wire  7 s# alu_operator_ex_o [6:0] $end
      $var wire  2 {* alu_vec_mode [1:0] $end
      $var wire  2 y# alu_vec_mode_ex_o [1:0] $end
      $var wire  1 m* apu_busy_i $end
      $var wire  1 m* apu_en $end
      $var wire  1 -$ apu_en_ex_o $end
      $var wire 15 %, apu_flags [14:0] $end
      $var wire 15 ]# apu_flags_ex_o [14:0] $end
      $var wire  2 {* apu_lat [1:0] $end
      $var wire  2 /$ apu_lat_ex_o [1:0] $end
      $var wire  6 t* apu_op [5:0] $end
      $var wire  6 .$ apu_op_ex_o [5:0] $end
      $var wire 96 q* apu_operands [95:0] $end
      $var wire 96 0$ apu_operands_ex_o [95:0] $end
      $var wire  1 m* apu_perf_dep_o $end
      $var wire  1 m* apu_read_dep_i $end
      $var wire 18 y* apu_read_regs [17:0] $end
      $var wire 18 y* apu_read_regs_o [17:0] $end
      $var wire  3 x* apu_read_regs_valid [2:0] $end
      $var wire  3 x* apu_read_regs_valid_o [2:0] $end
      $var wire  1 m* apu_stall $end
      $var wire  6 t* apu_waddr [5:0] $end
      $var wire  6 3$ apu_waddr_ex_o [5:0] $end
      $var wire  1 m* apu_write_dep_i $end
      $var wire 12 z* apu_write_regs [11:0] $end
      $var wire 12 z* apu_write_regs_o [11:0] $end
      $var wire  2 {* apu_write_regs_valid [1:0] $end
      $var wire  2 {* apu_write_regs_valid_o [1:0] $end
      $var wire  6 a# atop_ex_o [5:0] $end
      $var wire  6 t* atop_id [5:0] $end
      $var wire  5 v# bmask_a_ex_o [4:0] $end
      $var wire  5 u* bmask_a_id [4:0] $end
      $var wire  5 u* bmask_a_id_imm [4:0] $end
      $var wire  1 &, bmask_a_mux [0:0] $end
      $var wire  5 w# bmask_b_ex_o [4:0] $end
      $var wire  5 u* bmask_b_id [4:0] $end
      $var wire  5 u* bmask_b_id_imm [4:0] $end
      $var wire  2 ', bmask_b_mux [1:0] $end
      $var wire  1 o# branch_decision_i $end
      $var wire  1 n# branch_in_ex_o $end
      $var wire  1 M( branch_taken_ex $end
      $var wire  1 ]! clear_instr_valid_o $end
      $var wire  1 y! clk $end
      $var wire  1 T* clk_ungated_i $end
      $var wire  1 x( csr_access $end
      $var wire  1 ;$ csr_access_ex_o $end
      $var wire  1 P( csr_apu_stall $end
      $var wire  6 p! csr_cause_o [5:0] $end
      $var wire 32 i* csr_hwlp_data_i [31:0] $end
      $var wire  1 m* csr_hwlp_regid_i [0:0] $end
      $var wire  3 x* csr_hwlp_we_i [2:0] $end
      $var wire  1 l! csr_irq_sec_o $end
      $var wire  2 Q" csr_op [1:0] $end
      $var wire  2 <$ csr_op_ex_o [1:0] $end
      $var wire  1 s! csr_restore_dret_id_o $end
      $var wire  1 q! csr_restore_mret_id_o $end
      $var wire  1 r! csr_restore_uret_id_o $end
      $var wire  1 m! csr_save_cause_o $end
      $var wire  1 m* csr_save_ex_o $end
      $var wire  1 o! csr_save_id_o $end
      $var wire  1 n! csr_save_if_o $end
      $var wire  1 R" csr_status $end
      $var wire  1 e! ctrl_busy_o $end
      $var wire  2 N( ctrl_transfer_insn_in_dec [1:0] $end
      $var wire  2 C" ctrl_transfer_insn_in_id [1:0] $end
      $var wire  2 q( ctrl_transfer_target_mux_sel [1:0] $end
      $var wire  2 }* current_priv_lvl_i [1:0] $end
      $var wire  1 m* data_err_ack_o $end
      $var wire  1 m* data_err_i $end
      $var wire  1 E$ data_load_event_ex_o $end
      $var wire  1 m* data_load_event_id $end
      $var wire  1 F$ data_misaligned_ex_o $end
      $var wire  1 j# data_misaligned_i $end
      $var wire  2 C$ data_reg_offset_ex_o [1:0] $end
      $var wire  2 {* data_reg_offset_id [1:0] $end
      $var wire  1 D$ data_req_ex_o $end
      $var wire  1 P" data_req_id $end
      $var wire  2 B$ data_sign_ext_ex_o [1:0] $end
      $var wire  2 w( data_sign_ext_id [1:0] $end
      $var wire  2 A$ data_type_ex_o [1:0] $end
      $var wire  2 v( data_type_id [1:0] $end
      $var wire  1 Z# data_we_ex_o $end
      $var wire  1 u( data_we_id $end
      $var wire  1 @" deassert_we $end
      $var wire  3 u! debug_cause_o [2:0] $end
      $var wire  1 v! debug_csr_save_o $end
      $var wire  1 Q$ debug_ebreakm_i $end
      $var wire  1 R$ debug_ebreaku_i $end
      $var wire  1 `# debug_halted_o $end
      $var wire  1 ^# debug_havereset_o $end
      $var wire  1 O$ debug_mode_o $end
      $var wire  1 ]* debug_p_elw_no_sleep_o $end
      $var wire  1 F debug_req_i $end
      $var wire  1 _# debug_running_o $end
      $var wire  1 P$ debug_single_step_i $end
      $var wire  1 G" debug_wfi_no_sleep $end
      $var wire  1 +) dret_dec $end
      $var wire  1 B" dret_insn_dec $end
      $var wire  1 D( ebrk_insn_dec $end
      $var wire  1 G( ecall_insn_dec $end
      $var wire  1 i! ex_ready_i $end
      $var wire  1 k! ex_valid_i $end
      $var wire  5 b! exc_cause_o [4:0] $end
      $var wire  3 `! exc_pc_mux_o [2:0] $end
      $var wire  1 I( fencei_insn_dec $end
      $var wire  1 H fetch_enable_i $end
      $var wire  3 x* fp_rnd_mode [2:0] $end
      $var wire  3 #, fpu_dst_fmt [2:0] $end
      $var wire  2 $, fpu_int_fmt [1:0] $end
      $var wire  3 #, fpu_src_fmt [2:0] $end
      $var wire  1 m* fregfile_ena $end
      $var wire  3 x* frm_i [2:0] $end
      $var wire  1 F" halt_id $end
      $var wire  1 g! halt_if $end
      $var wire  1 g! halt_if_o $end
      $var wire 32 i* hwlp_cnt [31:0] $end
      $var wire 32 i* hwlp_cnt_int [31:0] $end
      $var wire  1 m* hwlp_cnt_mux_sel $end
      $var wire 64 $+ hwlp_cnt_o [63:0] $end
      $var wire  2 {* hwlp_dec_cnt [1:0] $end
      $var wire 32 i* hwlp_end [31:0] $end
      $var wire 64 "+ hwlp_end_o [63:0] $end
      $var wire  1 m* hwlp_jump_o $end
      $var wire  1 E" hwlp_mask $end
      $var wire  1 &, hwlp_regid [0:0] $end
      $var wire  1 &, hwlp_regid_int [0:0] $end
      $var wire 32 i* hwlp_start [31:0] $end
      $var wire 32 i* hwlp_start_int [31:0] $end
      $var wire  1 m* hwlp_start_mux_sel $end
      $var wire 64 ~* hwlp_start_o [63:0] $end
      $var wire 32 i* hwlp_target [31:0] $end
      $var wire  1 m* hwlp_target_mux_sel $end
      $var wire 32 i* hwlp_target_o [31:0] $end
      $var wire  1 m* hwlp_valid $end
      $var wire  3 x* hwlp_we [2:0] $end
      $var wire  3 x* hwlp_we_int [2:0] $end
      $var wire  3 x* hwlp_we_masked [2:0] $end
      $var wire  1 h! id_ready_o $end
      $var wire  1 j! id_valid_o $end
      $var wire  1 ,) id_valid_q $end
      $var wire  1 e# illegal_c_insn_i $end
      $var wire  1 A" illegal_insn_dec $end
      $var wire 32 `( imm_a [31:0] $end
      $var wire  1 p( imm_a_mux_sel [0:0] $end
      $var wire 32 H" imm_b [31:0] $end
      $var wire  4 M" imm_b_mux_sel [3:0] $end
      $var wire 32 Y( imm_bi_type [31:0] $end
      $var wire 32 _( imm_clip_type [31:0] $end
      $var wire 32 Q( imm_i_type [31:0] $end
      $var wire 32 R( imm_iz_type [31:0] $end
      $var wire 32 X( imm_s2_type [31:0] $end
      $var wire 32 Z( imm_s3_type [31:0] $end
      $var wire 32 S( imm_s_type [31:0] $end
      $var wire 32 T( imm_sb_type [31:0] $end
      $var wire 32 ^( imm_shuffle_type [31:0] $end
      $var wire 32 ]( imm_shuffleb_type [31:0] $end
      $var wire 32 ^( imm_shuffleh_type [31:0] $end
      $var wire 32 U( imm_u_type [31:0] $end
      $var wire 32 V( imm_uj_type [31:0] $end
      $var wire  2 x# imm_vec_ext_ex_o [1:0] $end
      $var wire  2 }( imm_vec_ext_id [1:0] $end
      $var wire 32 [( imm_vs_type [31:0] $end
      $var wire 32 \( imm_vu_type [31:0] $end
      $var wire 32 W( imm_z_type [31:0] $end
      $var wire 32 c# instr [31:0] $end
      $var wire 32 c# instr_rdata_i [31:0] $end
      $var wire  1 H$ instr_req_o $end
      $var wire  1 b# instr_valid_i $end
      $var wire  1 [! irq_ack_o $end
      $var wire 32 i* irq_i [31:0] $end
      $var wire  5 c( irq_id_ctrl [4:0] $end
      $var wire  5 \! irq_id_o [4:0] $end
      $var wire  1 a( irq_req_ctrl $end
      $var wire  1 b( irq_sec_ctrl $end
      $var wire  1 m* irq_sec_i $end
      $var wire  1 m* irq_wu_ctrl $end
      $var wire  1 m* is_clpx $end
      $var wire  1 d# is_compressed_i $end
      $var wire  1 d! is_decoding_o $end
      $var wire  1 f# is_fetch_failed_i $end
      $var wire  1 m* is_subrot $end
      $var wire  1 O( jr_stall $end
      $var wire 32 l# jump_target [31:0] $end
      $var wire 32 l# jump_target_o [31:0] $end
      $var wire  1 D" load_stall $end
      $var wire  1 I$ m_irq_enable_i $end
      $var wire 32 i* mcounteren_i [31:0] $end
      $var wire  1 X$ mhpmevent_branch_o $end
      $var wire  1 Y$ mhpmevent_branch_taken_o $end
      $var wire  1 Z$ mhpmevent_compressed_o $end
      $var wire  1 \$ mhpmevent_imiss_o $end
      $var wire  1 [$ mhpmevent_jr_stall_o $end
      $var wire  1 W$ mhpmevent_jump_o $end
      $var wire  1 ]$ mhpmevent_ld_stall_o $end
      $var wire  1 U$ mhpmevent_load_o $end
      $var wire  1 T$ mhpmevent_minstret_o $end
      $var wire  1 ^$ mhpmevent_pipe_stall_o $end
      $var wire  1 V$ mhpmevent_store_o $end
      $var wire 32 M$ mie_bypass_i [31:0] $end
      $var wire  1 [" minstret $end
      $var wire 32 N$ mip_o [31:0] $end
      $var wire  1 j# misaligned_stall $end
      $var wire  1 )) mret_dec $end
      $var wire  1 E( mret_insn_dec $end
      $var wire  1 +$ mult_clpx_img_ex_o $end
      $var wire  2 ,$ mult_clpx_shift_ex_o [1:0] $end
      $var wire  1 m* mult_dot_en $end
      $var wire 32 '$ mult_dot_op_a_ex_o [31:0] $end
      $var wire 32 ($ mult_dot_op_b_ex_o [31:0] $end
      $var wire 32 )$ mult_dot_op_c_ex_o [31:0] $end
      $var wire  2 {* mult_dot_signed [1:0] $end
      $var wire  2 *$ mult_dot_signed_ex_o [1:0] $end
      $var wire  1 N" mult_en $end
      $var wire  1 #$ mult_en_ex_o $end
      $var wire  5 &$ mult_imm_ex_o [4:0] $end
      $var wire  5 u* mult_imm_id [4:0] $end
      $var wire  1 &, mult_imm_mux [0:0] $end
      $var wire  1 N" mult_int_en $end
      $var wire  1 +$ mult_is_clpx_ex_o $end
      $var wire  1 k# mult_multicycle_i $end
      $var wire 32 ~# mult_operand_a_ex_o [31:0] $end
      $var wire 32 !$ mult_operand_b_ex_o [31:0] $end
      $var wire 32 "$ mult_operand_c_ex_o [31:0] $end
      $var wire  3 r( mult_operator [2:0] $end
      $var wire  3 }# mult_operator_ex_o [2:0] $end
      $var wire  1 m* mult_sel_subword $end
      $var wire  1 $$ mult_sel_subword_ex_o $end
      $var wire  2 s( mult_signed_mode [1:0] $end
      $var wire  2 %$ mult_signed_mode_ex_o [1:0] $end
      $var wire 32 S" operand_a_fw_id [31:0] $end
      $var wire  2 z( operand_a_fw_mux_sel [1:0] $end
      $var wire 32 V" operand_b [31:0] $end
      $var wire 32 T" operand_b_fw_id [31:0] $end
      $var wire  2 {( operand_b_fw_mux_sel [1:0] $end
      $var wire 32 W" operand_b_vec [31:0] $end
      $var wire 32 X" operand_c [31:0] $end
      $var wire 32 U" operand_c_fw_id [31:0] $end
      $var wire  2 |( operand_c_fw_mux_sel [1:0] $end
      $var wire 32 Y" operand_c_vec [31:0] $end
      $var wire 32 q# pc_ex_o [31:0] $end
      $var wire 32 h# pc_id_i [31:0] $end
      $var wire  4 _! pc_mux_o [3:0] $end
      $var wire  1 ^! pc_set_o $end
      $var wire  1 w! perf_imiss_i $end
      $var wire  1 -) perf_pipeline_stall $end
      $var wire  1 y( prepost_useincr $end
      $var wire  1 i# prepost_useincr_ex_o $end
      $var wire  1 &) reg_d_alu_is_reg_a_id $end
      $var wire  1 ') reg_d_alu_is_reg_b_id $end
      $var wire  1 () reg_d_alu_is_reg_c_id $end
      $var wire  1 ~( reg_d_ex_is_reg_a_id $end
      $var wire  1 !) reg_d_ex_is_reg_b_id $end
      $var wire  1 ") reg_d_ex_is_reg_c_id $end
      $var wire  1 #) reg_d_wb_is_reg_a_id $end
      $var wire  1 $) reg_d_wb_is_reg_b_id $end
      $var wire  1 %) reg_d_wb_is_reg_c_id $end
      $var wire  1 J( rega_used_dec $end
      $var wire  1 K( regb_used_dec $end
      $var wire  2 o( regc_mux [1:0] $end
      $var wire  1 L( regc_used_dec $end
      $var wire  6 d( regfile_addr_ra_id [5:0] $end
      $var wire  6 e( regfile_addr_rb_id [5:0] $end
      $var wire  6 f( regfile_addr_rc_id [5:0] $end
      $var wire  6 8$ regfile_alu_waddr_ex_o [5:0] $end
      $var wire  6 8$ regfile_alu_waddr_fw_i [5:0] $end
      $var wire  6 h( regfile_alu_waddr_id [5:0] $end
      $var wire  1 t( regfile_alu_waddr_mux_sel $end
      $var wire 32 f! regfile_alu_wdata_fw_i [31:0] $end
      $var wire  1 i( regfile_alu_we_dec_id $end
      $var wire  1 9$ regfile_alu_we_ex_o $end
      $var wire  1 :$ regfile_alu_we_fw_i $end
      $var wire  1 I" regfile_alu_we_id $end
      $var wire 32 j( regfile_data_ra_id [31:0] $end
      $var wire 32 k( regfile_data_rb_id [31:0] $end
      $var wire 32 l( regfile_data_rc_id [31:0] $end
      $var wire  1 m* regfile_fp_a $end
      $var wire  1 m* regfile_fp_b $end
      $var wire  1 m* regfile_fp_c $end
      $var wire  1 m* regfile_fp_d $end
      $var wire  6 4$ regfile_waddr_ex_o [5:0] $end
      $var wire  6 g( regfile_waddr_id [5:0] $end
      $var wire  6 6$ regfile_waddr_wb_i [5:0] $end
      $var wire 32 ** regfile_wdata_wb_i [31:0] $end
      $var wire  1 5$ regfile_we_ex_o $end
      $var wire  1 O" regfile_we_id $end
      $var wire  1 7$ regfile_we_wb_i $end
      $var wire  1 U* rst_n $end
      $var wire  1 m* scalar_replication $end
      $var wire  1 m* scalar_replication_c $end
      $var wire  1 m* scan_cg_en_i $end
      $var wire  2 c! trap_addr_mux_o [1:0] $end
      $var wire  1 S$ trigger_match_i $end
      $var wire  1 J$ u_irq_enable_i $end
      $var wire  1 *) uret_dec $end
      $var wire  1 F( uret_insn_dec $end
      $var wire  1 x! wake_from_sleep_o $end
      $var wire  1 +* wb_ready_i $end
      $var wire  1 H( wfi_insn_dec $end
      $scope module controller_i $end
       $var wire 32 j* PULP_CLUSTER [31:0] $end
       $var wire 32 j* PULP_XPULP [31:0] $end
       $var wire  1 m* apu_en_i $end
       $var wire  1 m* apu_read_dep_i $end
       $var wire  1 m* apu_stall_o $end
       $var wire  1 m* apu_write_dep_i $end
       $var wire  1 `" branch_in_id $end
       $var wire  1 1) branch_in_id_dec $end
       $var wire  1 M( branch_taken_ex_i $end
       $var wire  1 y! clk $end
       $var wire  1 T* clk_ungated_i $end
       $var wire  6 p! csr_cause_o [5:0] $end
       $var wire  1 l! csr_irq_sec_o $end
       $var wire  1 s! csr_restore_dret_id_o $end
       $var wire  1 q! csr_restore_mret_id_o $end
       $var wire  1 r! csr_restore_uret_id_o $end
       $var wire  1 m! csr_save_cause_o $end
       $var wire  1 m* csr_save_ex_o $end
       $var wire  1 o! csr_save_id_o $end
       $var wire  1 n! csr_save_if_o $end
       $var wire  1 R" csr_status_i $end
       $var wire  1 e! ctrl_busy_o $end
       $var wire  5 .) ctrl_fsm_cs [4:0] $end
       $var wire  5 \" ctrl_fsm_ns [4:0] $end
       $var wire  2 N( ctrl_transfer_insn_in_dec_i [1:0] $end
       $var wire  2 C" ctrl_transfer_insn_in_id_i [1:0] $end
       $var wire  2 }* current_priv_lvl_i [1:0] $end
       $var wire  1 m* data_err_ack_o $end
       $var wire  1 m* data_err_i $end
       $var wire  1 2) data_err_q $end
       $var wire  1 m* data_load_event_i $end
       $var wire  1 j# data_misaligned_i $end
       $var wire  1 D$ data_req_ex_i $end
       $var wire  1 Z# data_we_ex_i $end
       $var wire  1 @" deassert_we_o $end
       $var wire  3 u! debug_cause_o [2:0] $end
       $var wire  1 v! debug_csr_save_o $end
       $var wire  1 Q$ debug_ebreakm_i $end
       $var wire  1 R$ debug_ebreaku_i $end
       $var wire  1 f" debug_force_wakeup_n $end
       $var wire  1 5) debug_force_wakeup_q $end
       $var wire  3 /) debug_fsm_cs [2:0] $end
       $var wire  3 ]" debug_fsm_ns [2:0] $end
       $var wire  1 `# debug_halted_o $end
       $var wire  1 ^# debug_havereset_o $end
       $var wire  1 a" debug_mode_n $end
       $var wire  1 O$ debug_mode_o $end
       $var wire  1 O$ debug_mode_q $end
       $var wire  1 ]* debug_p_elw_no_sleep_o $end
       $var wire  1 e" debug_req_entry_n $end
       $var wire  1 4) debug_req_entry_q $end
       $var wire  1 F debug_req_i $end
       $var wire  1 J debug_req_pending $end
       $var wire  1 I debug_req_q $end
       $var wire  1 _# debug_running_o $end
       $var wire  1 P$ debug_single_step_i $end
       $var wire  1 G" debug_wfi_no_sleep_o $end
       $var wire  1 +) dret_dec_i $end
       $var wire  1 B" dret_insn_i $end
       $var wire  1 b" ebrk_force_debug_mode $end
       $var wire  1 D( ebrk_insn_i $end
       $var wire  1 G( ecall_insn_i $end
       $var wire  1 k! ex_valid_i $end
       $var wire  5 b! exc_cause_o [4:0] $end
       $var wire  3 `! exc_pc_mux_o [2:0] $end
       $var wire  1 I( fencei_insn_i $end
       $var wire  1 H fetch_enable_i $end
       $var wire  1 F" halt_id_o $end
       $var wire  1 g! halt_if_o $end
       $var wire  1 m* hwlp_counter0_gt_1 $end
       $var wire  1 m* hwlp_counter1_gt_1 $end
       $var wire 64 $+ hwlp_counter_i [63:0] $end
       $var wire  2 {* hwlp_dec_cnt_o [1:0] $end
       $var wire  1 m* hwlp_end0_eq_pc $end
       $var wire  1 m* hwlp_end0_eq_pc_plus4 $end
       $var wire  1 m* hwlp_end0_geq_pc $end
       $var wire  1 m* hwlp_end1_eq_pc $end
       $var wire  1 m* hwlp_end1_eq_pc_plus4 $end
       $var wire  1 m* hwlp_end1_geq_pc $end
       $var wire  1 m* hwlp_end_4_id_d $end
       $var wire  1 m* hwlp_end_4_id_q $end
       $var wire 64 "+ hwlp_end_addr_i [63:0] $end
       $var wire  1 m* hwlp_jump_o $end
       $var wire  1 E" hwlp_mask_o $end
       $var wire  1 m* hwlp_start0_leq_pc $end
       $var wire  1 m* hwlp_start1_leq_pc $end
       $var wire 64 ~* hwlp_start_addr_i [63:0] $end
       $var wire 32 i* hwlp_targ_addr_o [31:0] $end
       $var wire  1 h! id_ready_i $end
       $var wire  1 j! id_valid_i $end
       $var wire  1 A" illegal_insn_i $end
       $var wire  1 d" illegal_insn_n $end
       $var wire  1 3) illegal_insn_q $end
       $var wire  1 H$ instr_req_o $end
       $var wire  1 b# instr_valid_i $end
       $var wire  1 [! irq_ack_o $end
       $var wire  5 c( irq_id_ctrl_i [4:0] $end
       $var wire  5 \! irq_id_o [4:0] $end
       $var wire  1 a( irq_req_ctrl_i $end
       $var wire  1 b( irq_sec_ctrl_i $end
       $var wire  1 m* irq_wu_ctrl_i $end
       $var wire  1 d# is_compressed_i $end
       $var wire  1 d! is_decoding_o $end
       $var wire  1 f# is_fetch_failed_i $end
       $var wire  1 m* is_hwlp_body $end
       $var wire  1 c" is_hwlp_illegal $end
       $var wire  1 O( jr_stall_o $end
       $var wire  1 ^" jump_done $end
       $var wire  1 0) jump_done_q $end
       $var wire  1 _" jump_in_dec $end
       $var wire  1 D" load_stall_o $end
       $var wire  1 j# misaligned_stall_o $end
       $var wire  1 )) mret_dec_i $end
       $var wire  1 E( mret_insn_i $end
       $var wire  1 k# mult_multicycle_i $end
       $var wire  2 z( operand_a_fw_mux_sel_o [1:0] $end
       $var wire  2 {( operand_b_fw_mux_sel_o [1:0] $end
       $var wire  2 |( operand_c_fw_mux_sel_o [1:0] $end
       $var wire 32 h# pc_id_i [31:0] $end
       $var wire  4 _! pc_mux_o [3:0] $end
       $var wire  1 ^! pc_set_o $end
       $var wire  1 -) perf_pipeline_stall_o $end
       $var wire  1 &) reg_d_alu_is_reg_a_i $end
       $var wire  1 ') reg_d_alu_is_reg_b_i $end
       $var wire  1 () reg_d_alu_is_reg_c_i $end
       $var wire  1 ~( reg_d_ex_is_reg_a_i $end
       $var wire  1 !) reg_d_ex_is_reg_b_i $end
       $var wire  1 ") reg_d_ex_is_reg_c_i $end
       $var wire  1 #) reg_d_wb_is_reg_a_i $end
       $var wire  1 $) reg_d_wb_is_reg_b_i $end
       $var wire  1 %) reg_d_wb_is_reg_c_i $end
       $var wire  6 h( regfile_alu_waddr_id_i [5:0] $end
       $var wire  1 :$ regfile_alu_we_fw_i $end
       $var wire  6 4$ regfile_waddr_ex_i [5:0] $end
       $var wire  1 5$ regfile_we_ex_i $end
       $var wire  1 i( regfile_we_id_i $end
       $var wire  1 7$ regfile_we_wb_i $end
       $var wire  1 U* rst_n $end
       $var wire  2 c! trap_addr_mux_o [1:0] $end
       $var wire  1 S$ trigger_match_i $end
       $var wire  1 *) uret_dec_i $end
       $var wire  1 F( uret_insn_i $end
       $var wire  1 x! wake_from_sleep_o $end
       $var wire  1 +* wb_ready_i $end
       $var wire  1 g" wfi_active $end
       $var wire  1 H( wfi_i $end
      $upscope $end
      $scope module decoder_i $end
       $var wire 32 t+ APU_WOP_CPU [31:0] $end
       $var wire 32 j* A_EXTENSION [31:0] $end
       $var wire 32 k* DEBUG_TRIGGER_EN [31:0] $end
       $var wire 32 j* FPU [31:0] $end
       $var wire 32 j* PULP_CLUSTER [31:0] $end
       $var wire 32 j* PULP_SECURE [31:0] $end
       $var wire 32 j* PULP_XPULP [31:0] $end
       $var wire 32 j* USE_PMP [31:0] $end
       $var wire  1 (, alu_bmask_a_mux_sel_o $end
       $var wire  1 (, alu_bmask_b_mux_sel_o $end
       $var wire  1 8) alu_en $end
       $var wire  1 J" alu_en_o $end
       $var wire  3 m( alu_op_a_mux_sel_o [2:0] $end
       $var wire  3 L" alu_op_b_mux_sel_o [2:0] $end
       $var wire  2 n( alu_op_c_mux_sel_o [1:0] $end
       $var wire  7 K" alu_operator_o [6:0] $end
       $var wire  2 {* alu_vec_mode_o [1:0] $end
       $var wire  1 m* apu_en $end
       $var wire  1 m* apu_en_o $end
       $var wire  2 {* apu_lat_o [1:0] $end
       $var wire  6 t* apu_op_o [5:0] $end
       $var wire  6 t* atop_o [5:0] $end
       $var wire  1 &, bmask_a_mux_o [0:0] $end
       $var wire  2 ', bmask_b_mux_o [1:0] $end
       $var wire  1 m* check_fprm $end
       $var wire  1 x( csr_access_o $end
       $var wire  1 h" csr_illegal $end
       $var wire  2 i" csr_op [1:0] $end
       $var wire  2 Q" csr_op_o [1:0] $end
       $var wire  1 R" csr_status_o $end
       $var wire  2 N( ctrl_transfer_insn [1:0] $end
       $var wire  2 N( ctrl_transfer_insn_in_dec_o [1:0] $end
       $var wire  2 C" ctrl_transfer_insn_in_id_o [1:0] $end
       $var wire  2 q( ctrl_transfer_target_mux_sel_o [1:0] $end
       $var wire  2 }* current_priv_lvl_i [1:0] $end
       $var wire  1 m* data_load_event_o $end
       $var wire  2 {* data_reg_offset_o [1:0] $end
       $var wire  1 7) data_req $end
       $var wire  1 P" data_req_o $end
       $var wire  2 w( data_sign_extension_o [1:0] $end
       $var wire  2 v( data_type_o [1:0] $end
       $var wire  1 u( data_we_o $end
       $var wire  1 @" deassert_we_i $end
       $var wire  1 O$ debug_mode_i $end
       $var wire  1 G" debug_wfi_no_sleep_i $end
       $var wire  1 +) dret_dec_o $end
       $var wire  1 B" dret_insn_o $end
       $var wire  1 D( ebrk_insn_o $end
       $var wire  1 G( ecall_insn_o $end
       $var wire  1 I( fencei_insn_o $end
       $var wire  2 *, fp_op_group [1:0] $end
       $var wire  3 x* fp_rnd_mode_o [2:0] $end
       $var wire  3 #, fpu_dst_fmt_o [2:0] $end
       $var wire  2 $, fpu_int_fmt_o [1:0] $end
       $var wire  4 ), fpu_op [3:0] $end
       $var wire  1 m* fpu_op_mod $end
       $var wire  3 #, fpu_src_fmt_o [2:0] $end
       $var wire  1 m* fpu_vec_op $end
       $var wire  3 x* frm_i [2:0] $end
       $var wire  1 m* hwlp_cnt_mux_sel_o $end
       $var wire  1 m* hwlp_start_mux_sel_o $end
       $var wire  1 m* hwlp_target_mux_sel_o $end
       $var wire  3 x* hwlp_we [2:0] $end
       $var wire  3 x* hwlp_we_o [2:0] $end
       $var wire  1 e# illegal_c_insn_i $end
       $var wire  1 A" illegal_insn_o $end
       $var wire  1 p( imm_a_mux_sel_o [0:0] $end
       $var wire  4 M" imm_b_mux_sel_o [3:0] $end
       $var wire 32 c# instr_rdata_i [31:0] $end
       $var wire  1 m* is_clpx_o $end
       $var wire  1 m* is_subrot_o $end
       $var wire 32 i* mcounteren_i [31:0] $end
       $var wire  1 )) mret_dec_o $end
       $var wire  1 E( mret_insn_o $end
       $var wire  1 m* mult_dot_en $end
       $var wire  1 m* mult_dot_en_o $end
       $var wire  2 {* mult_dot_signed_o [1:0] $end
       $var wire  1 &, mult_imm_mux_o [0:0] $end
       $var wire  1 9) mult_int_en $end
       $var wire  1 N" mult_int_en_o $end
       $var wire  3 r( mult_operator_o [2:0] $end
       $var wire  1 m* mult_sel_subword_o $end
       $var wire  2 s( mult_signed_mode_o [1:0] $end
       $var wire  1 y( prepost_useincr_o $end
       $var wire  1 m* reg_fp_a_o $end
       $var wire  1 m* reg_fp_b_o $end
       $var wire  1 m* reg_fp_c_o $end
       $var wire  1 m* reg_fp_d_o $end
       $var wire  1 J( rega_used_o $end
       $var wire  1 K( regb_used_o $end
       $var wire  2 o( regc_mux_o [1:0] $end
       $var wire  1 L( regc_used_o $end
       $var wire  1 t( regfile_alu_waddr_sel_o $end
       $var wire  1 i( regfile_alu_we $end
       $var wire  1 i( regfile_alu_we_dec_o $end
       $var wire  1 I" regfile_alu_we_o $end
       $var wire  1 6) regfile_mem_we $end
       $var wire  1 O" regfile_mem_we_o $end
       $var wire  1 m* scalar_replication_c_o $end
       $var wire  1 m* scalar_replication_o $end
       $var wire  1 *) uret_dec_o $end
       $var wire  1 F( uret_insn_o $end
       $var wire  1 H( wfi_o $end
      $upscope $end
      $scope module int_controller_i $end
       $var wire 32 j* PULP_SECURE [31:0] $end
       $var wire  1 y! clk $end
       $var wire  2 }* current_priv_lvl_i [1:0] $end
       $var wire  1 I$ global_irq_enable $end
       $var wire 32 i* irq_i [31:0] $end
       $var wire  5 c( irq_id_ctrl_o [4:0] $end
       $var wire 32 :) irq_local_qual [31:0] $end
       $var wire 32 N$ irq_q [31:0] $end
       $var wire  1 a( irq_req_ctrl_o $end
       $var wire  1 b( irq_sec_ctrl_o $end
       $var wire  1 m* irq_sec_i $end
       $var wire  1 b( irq_sec_q $end
       $var wire  1 m* irq_wu_ctrl_o $end
       $var wire  1 I$ m_ie_i $end
       $var wire 32 M$ mie_bypass_i [31:0] $end
       $var wire 32 N$ mip_o [31:0] $end
       $var wire  1 U* rst_n $end
       $var wire  1 J$ u_ie_i $end
      $upscope $end
      $scope module register_file_i $end
       $var wire 32 t+ ADDR_WIDTH [31:0] $end
       $var wire 32 v+ DATA_WIDTH [31:0] $end
       $var wire 32 j* FPU [31:0] $end
       $var wire 32 v+ NUM_FP_WORDS [31:0] $end
       $var wire 32 v+ NUM_TOT_WORDS [31:0] $end
       $var wire 32 v+ NUM_WORDS [31:0] $end
       $var wire 32 j* PULP_ZFINX [31:0] $end
       $var wire  1 y! clk $end
       $var wire 1024 ;) mem [1023:0] $end
       $var wire 1024 +, mem_fp [1023:0] $end
       $var wire  6 d( raddr_a_i [5:0] $end
       $var wire  6 e( raddr_b_i [5:0] $end
       $var wire  6 f( raddr_c_i [5:0] $end
       $var wire 32 j( rdata_a_o [31:0] $end
       $var wire 32 k( rdata_b_o [31:0] $end
       $var wire 32 l( rdata_c_o [31:0] $end
       $var wire  1 U* rst_n $end
       $var wire  1 m* scan_cg_en_i $end
       $var wire  6 6$ waddr_a [5:0] $end
       $var wire  6 6$ waddr_a_i [5:0] $end
       $var wire  6 8$ waddr_b [5:0] $end
       $var wire  6 8$ waddr_b_i [5:0] $end
       $var wire 32 ** wdata_a_i [31:0] $end
       $var wire 32 f! wdata_b_i [31:0] $end
       $var wire 32 [) we_a_dec [31:0] $end
       $var wire  1 7$ we_a_i $end
       $var wire 32 \) we_b_dec [31:0] $end
       $var wire  1 :$ we_b_i $end
      $upscope $end
     $upscope $end
     $scope module if_stage_i $end
      $var wire 32 j* FPU [31:0] $end
      $var wire 32 j* PULP_OBI [31:0] $end
      $var wire 32 j* PULP_SECURE [31:0] $end
      $var wire 32 j* PULP_XPULP [31:0] $end
      $var wire  1 s" aligner_ready $end
      $var wire 32 g* boot_addr_i [31:0] $end
      $var wire 32 m" branch_addr_n [31:0] $end
      $var wire  1 l" branch_req $end
      $var wire  1 ]! clear_instr_valid_i $end
      $var wire  1 y! clk $end
      $var wire  1 t! csr_mtvec_init_o $end
      $var wire 32 L$ depc_i [31:0] $end
      $var wire 32 p* dm_exception_addr_i [31:0] $end
      $var wire 32 h* dm_halt_addr_i [31:0] $end
      $var wire 32 p" exc_pc [31:0] $end
      $var wire  3 `! exc_pc_mux_i [2:0] $end
      $var wire  5 r" exc_vec_pc_mux [4:0] $end
      $var wire  1 m* fetch_failed $end
      $var wire 32 -* fetch_rdata [31:0] $end
      $var wire  1 o" fetch_ready $end
      $var wire  1 n" fetch_valid $end
      $var wire  1 g! halt_if_i $end
      $var wire  1 m* hwlp_jump_i $end
      $var wire 32 i* hwlp_target_i [31:0] $end
      $var wire  1 h! id_ready_i $end
      $var wire  1 0# if_busy_o $end
      $var wire  1 k" if_ready $end
      $var wire  1 j" if_valid $end
      $var wire  1 .* illegal_c_insn $end
      $var wire  1 e# illegal_c_insn_id_o $end
      $var wire 32 Z! instr_addr_o [31:0] $end
      $var wire 32 /* instr_aligned [31:0] $end
      $var wire  1 1* instr_compressed_int $end
      $var wire 32 0* instr_decompressed [31:0] $end
      $var wire  1 m* instr_err_i $end
      $var wire  1 m* instr_err_pmp_i $end
      $var wire  1 Y! instr_gnt_i $end
      $var wire 32 V# instr_rdata_i [31:0] $end
      $var wire 32 c# instr_rdata_id_o [31:0] $end
      $var wire  1 X! instr_req_o $end
      $var wire  1 E instr_rvalid_i $end
      $var wire  1 t" instr_valid $end
      $var wire  1 b# instr_valid_id_o $end
      $var wire  1 d# is_compressed_id_o $end
      $var wire  1 f# is_fetch_failed_o $end
      $var wire 32 m# jump_target_ex_i [31:0] $end
      $var wire 32 l# jump_target_id_i [31:0] $end
      $var wire  5 a! m_exc_vec_pc_mux_i [4:0] $end
      $var wire 24 =$ m_trap_base_addr_i [23:0] $end
      $var wire 32 K$ mepc_i [31:0] $end
      $var wire 32 h# pc_id_o [31:0] $end
      $var wire 32 g# pc_if_o [31:0] $end
      $var wire  4 _! pc_mux_i [3:0] $end
      $var wire  1 ^! pc_set_i $end
      $var wire  1 w! perf_imiss_o $end
      $var wire  1 0# prefetch_busy $end
      $var wire  1 H$ req_i $end
      $var wire  1 U* rst_n $end
      $var wire  2 c! trap_addr_mux_i [1:0] $end
      $var wire 24 q" trap_base_addr [23:0] $end
      $var wire  5 u* u_exc_vec_pc_mux_i [4:0] $end
      $var wire 24 |* u_trap_base_addr_i [23:0] $end
      $var wire 32 i* uepc_i [31:0] $end
      $scope module aligner_i $end
       $var wire  1 s" aligner_ready_o $end
       $var wire  1 b) aligner_ready_q $end
       $var wire 32 u" branch_addr_i [31:0] $end
       $var wire  1 l" branch_i $end
       $var wire  1 y! clk $end
       $var wire 32 -* fetch_rdata_i [31:0] $end
       $var wire  1 n" fetch_valid_i $end
       $var wire 32 i* hwlp_addr_i [31:0] $end
       $var wire 32 _) hwlp_addr_q [31:0] $end
       $var wire  1 m* hwlp_update_pc_i $end
       $var wire  1 c) hwlp_update_pc_q $end
       $var wire  1 j" if_valid_i $end
       $var wire 32 /* instr_aligned_o [31:0] $end
       $var wire  1 t" instr_valid_o $end
       $var wire  3 v" next_state [2:0] $end
       $var wire 32 w" pc_n [31:0] $end
       $var wire 32 g# pc_o [31:0] $end
       $var wire 32 a) pc_plus2 [31:0] $end
       $var wire 32 `) pc_plus4 [31:0] $end
       $var wire 32 g# pc_q [31:0] $end
       $var wire 16 ^) r_instr_h [15:0] $end
       $var wire  1 U* rst_n $end
       $var wire  3 ]) state [2:0] $end
       $var wire  1 x" update_state $end
      $upscope $end
      $scope module compressed_decoder_i $end
       $var wire 32 j* FPU [31:0] $end
       $var wire  1 .* illegal_instr_o $end
       $var wire 32 /* instr_i [31:0] $end
       $var wire 32 0* instr_o [31:0] $end
       $var wire  1 1* is_compressed_o $end
      $upscope $end
      $scope module prefetch_buffer_i $end
       $var wire 32 K, FIFO_ADDR_DEPTH [31:0] $end
       $var wire 32 w* FIFO_DEPTH [31:0] $end
       $var wire 32 j* PULP_OBI [31:0] $end
       $var wire 32 j* PULP_XPULP [31:0] $end
       $var wire 32 u" branch_addr_i [31:0] $end
       $var wire  1 l" branch_i $end
       $var wire  1 0# busy_o $end
       $var wire  1 y! clk $end
       $var wire 32 -* fetch_rdata_o [31:0] $end
       $var wire  1 o" fetch_ready_i $end
       $var wire  1 n" fetch_valid_o $end
       $var wire  2 e) fifo_cnt [1:0] $end
       $var wire  1 g) fifo_empty $end
       $var wire  1 l" fifo_flush $end
       $var wire  1 m* fifo_flush_but_first $end
       $var wire  1 |" fifo_pop $end
       $var wire  1 {" fifo_push $end
       $var wire 32 f) fifo_rdata [31:0] $end
       $var wire  1 m* hwlp_jump_i $end
       $var wire 32 i* hwlp_target_i [31:0] $end
       $var wire 32 Z! instr_addr_o [31:0] $end
       $var wire  1 m* instr_err_i $end
       $var wire  1 m* instr_err_pmp_i $end
       $var wire  1 Y! instr_gnt_i $end
       $var wire 32 V# instr_rdata_i [31:0] $end
       $var wire  1 X! instr_req_o $end
       $var wire  1 E instr_rvalid_i $end
       $var wire  1 H$ req_i $end
       $var wire  1 m* resp_err $end
       $var wire 32 V# resp_rdata [31:0] $end
       $var wire  1 E resp_valid $end
       $var wire  1 U* rst_n $end
       $var wire 32 z" trans_addr [31:0] $end
       $var wire  1 d) trans_ready $end
       $var wire  1 y" trans_valid $end
       $scope module fifo_i $end
        $var wire 32 K, ADDR_DEPTH [31:0] $end
        $var wire 32 M, DATA_WIDTH [31:0] $end
        $var wire 32 N, DEPTH [31:0] $end
        $var wire  1 L, FALL_THROUGH $end
        $var wire 32 N, FIFO_DEPTH [31:0] $end
        $var wire  1 y! clk_i $end
        $var wire  2 e) cnt_o [1:0] $end
        $var wire 32 V# data_i [31:0] $end
        $var wire 32 f) data_o [31:0] $end
        $var wire  1 g) empty_o $end
        $var wire  1 m* flush_but_first_i $end
        $var wire  1 l" flush_i $end
        $var wire  1 h) full_o $end
        $var wire  1 }" gate_clock $end
        $var wire 64 ## mem_n [63:0] $end
        $var wire 64 k) mem_q [63:0] $end
        $var wire  1 |" pop_i $end
        $var wire  1 {" push_i $end
        $var wire  1 ~" read_pointer_n [0:0] $end
        $var wire  1 i) read_pointer_q [0:0] $end
        $var wire  1 U* rst_ni $end
        $var wire  2 "# status_cnt_n [1:0] $end
        $var wire  2 e) status_cnt_q [1:0] $end
        $var wire  1 m* testmode_i $end
        $var wire  1 !# write_pointer_n [0:0] $end
        $var wire  1 j) write_pointer_q [0:0] $end
       $upscope $end
       $scope module instruction_obi_i $end
        $var wire 32 j* TRANS_STABLE [31:0] $end
        $var wire  1 y! clk $end
        $var wire  1 &# next_state $end
        $var wire 32 Z! obi_addr_o [31:0] $end
        $var wire  6 p) obi_atop_o [5:0] $end
        $var wire  4 n) obi_be_o [3:0] $end
        $var wire  1 m* obi_err_i $end
        $var wire  1 Y! obi_gnt_i $end
        $var wire 32 V# obi_rdata_i [31:0] $end
        $var wire  1 X! obi_req_o $end
        $var wire  1 E obi_rvalid_i $end
        $var wire 32 o) obi_wdata_o [31:0] $end
        $var wire  1 m) obi_we_o $end
        $var wire  1 m* resp_err_o $end
        $var wire 32 V# resp_rdata_o [31:0] $end
        $var wire  1 E resp_valid_o $end
        $var wire  1 U* rst_n $end
        $var wire  1 q) state_q $end
        $var wire 32 %# trans_addr_i [31:0] $end
        $var wire  6 t* trans_atop_i [5:0] $end
        $var wire  4 O, trans_be_i [3:0] $end
        $var wire  1 d) trans_ready_o $end
        $var wire  1 y" trans_valid_i $end
        $var wire 32 i* trans_wdata_i [31:0] $end
        $var wire  1 m* trans_we_i $end
        $scope module gen_no_trans_stable $end
         $var wire 32 r) obi_addr_q [31:0] $end
         $var wire  6 v) obi_atop_q [5:0] $end
         $var wire  4 t) obi_be_q [3:0] $end
         $var wire 32 u) obi_wdata_q [31:0] $end
         $var wire  1 s) obi_we_q $end
        $upscope $end
       $upscope $end
       $scope module prefetch_controller_i $end
        $var wire 32 w* DEPTH [31:0] $end
        $var wire 32 k* FIFO_ADDR_DEPTH [31:0] $end
        $var wire 32 j* PULP_OBI [31:0] $end
        $var wire 32 j* PULP_XPULP [31:0] $end
        $var wire 32 )# aligned_branch_addr [31:0] $end
        $var wire 32 u" branch_addr_i [31:0] $end
        $var wire  1 l" branch_i $end
        $var wire  1 0# busy_o $end
        $var wire  1 y! clk $end
        $var wire  2 x) cnt_q [1:0] $end
        $var wire  1 E count_down $end
        $var wire  1 O# count_up $end
        $var wire  1 o" fetch_ready_i $end
        $var wire  1 n" fetch_valid_o $end
        $var wire  2 e) fifo_cnt_i [1:0] $end
        $var wire  2 P# fifo_cnt_masked [1:0] $end
        $var wire  1 g) fifo_empty_i $end
        $var wire  1 m* fifo_flush_but_first_o $end
        $var wire  1 l" fifo_flush_o $end
        $var wire  1 |" fifo_pop_o $end
        $var wire  1 {" fifo_push_o $end
        $var wire  1 |) fifo_valid $end
        $var wire  2 y) flush_cnt_q [1:0] $end
        $var wire  1 m* hwlp_flush_after_resp $end
        $var wire  2 {* hwlp_flush_cnt_delayed_q [1:0] $end
        $var wire  1 m* hwlp_flush_resp $end
        $var wire  1 m* hwlp_flush_resp_delayed $end
        $var wire  1 m* hwlp_jump_i $end
        $var wire 32 i* hwlp_target_i [31:0] $end
        $var wire  1 m* hwlp_wait_resp_flush $end
        $var wire  2 ^* next_cnt [1:0] $end
        $var wire  2 (# next_flush_cnt [1:0] $end
        $var wire  1 '# next_state $end
        $var wire  1 H$ req_i $end
        $var wire  1 E resp_valid_i $end
        $var wire  1 U* rst_n $end
        $var wire  1 w) state_q $end
        $var wire 32 {) trans_addr_incr [31:0] $end
        $var wire 32 z" trans_addr_o [31:0] $end
        $var wire 32 z) trans_addr_q [31:0] $end
        $var wire  1 d) trans_ready_i $end
        $var wire  1 y" trans_valid_o $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module load_store_unit_i $end
      $var wire 32 w* DEPTH [31:0] $end
      $var wire 32 j* PULP_OBI [31:0] $end
      $var wire  1 i# addr_useincr_ex_i $end
      $var wire  1 p# busy_o $end
      $var wire  1 y! clk $end
      $var wire  2 }) cnt_q [1:0] $end
      $var wire  1 Y* count_down $end
      $var wire  1 `* count_up $end
      $var wire  1 2* ctrl_update $end
      $var wire 32 ~) data_addr_int [31:0] $end
      $var wire 32 Y# data_addr_o [31:0] $end
      $var wire  6 a# data_atop_ex_i [5:0] $end
      $var wire  6 a# data_atop_o [5:0] $end
      $var wire  4 [# data_be [3:0] $end
      $var wire  4 [# data_be_o [3:0] $end
      $var wire  1 m* data_err_i $end
      $var wire  1 m* data_err_pmp_i $end
      $var wire  1 )* data_gnt_i $end
      $var wire  1 E$ data_load_event_ex_i $end
      $var wire  1 %* data_load_event_q $end
      $var wire  1 F$ data_misaligned_ex_i $end
      $var wire  1 j# data_misaligned_o $end
      $var wire 32 ** data_rdata_ex_o [31:0] $end
      $var wire 32 3* data_rdata_ext [31:0] $end
      $var wire 32 Z* data_rdata_i [31:0] $end
      $var wire  2 C$ data_reg_offset_ex_i [1:0] $end
      $var wire  1 D$ data_req_ex_i $end
      $var wire  1 X# data_req_o $end
      $var wire  1 Y* data_rvalid_i $end
      $var wire  2 B$ data_sign_ext_ex_i [1:0] $end
      $var wire  2 #* data_sign_ext_q [1:0] $end
      $var wire  2 A$ data_type_ex_i [1:0] $end
      $var wire  2 !* data_type_q [1:0] $end
      $var wire 32 \# data_wdata [31:0] $end
      $var wire 32 m# data_wdata_ex_i [31:0] $end
      $var wire 32 \# data_wdata_o [31:0] $end
      $var wire  1 Z# data_we_ex_i $end
      $var wire  1 Z# data_we_o $end
      $var wire  1 $* data_we_q $end
      $var wire  1 m* load_err_o $end
      $var wire  1 ,* lsu_ready_ex_o $end
      $var wire  1 +* lsu_ready_wb_o $end
      $var wire  1 F$ misaligned_st $end
      $var wire  2 _* next_cnt [1:0] $end
      $var wire 32 t# operand_a_ex_i [31:0] $end
      $var wire 32 u# operand_b_ex_i [31:0] $end
      $var wire  1 \* p_elw_finish_o $end
      $var wire  1 G$ p_elw_start_o $end
      $var wire 32 5* rdata_b_ext [31:0] $end
      $var wire 32 4* rdata_h_ext [31:0] $end
      $var wire  2 "* rdata_offset_q [1:0] $end
      $var wire 32 '* rdata_q [31:0] $end
      $var wire 32 a* rdata_w_ext [31:0] $end
      $var wire  1 m* resp_err $end
      $var wire 32 Z* resp_rdata [31:0] $end
      $var wire  1 Y* resp_valid $end
      $var wire  1 U* rst_n $end
      $var wire  1 m* store_err_o $end
      $var wire 32 Y# trans_addr [31:0] $end
      $var wire  6 a# trans_atop [5:0] $end
      $var wire  4 [# trans_be [3:0] $end
      $var wire  1 )* trans_ready $end
      $var wire  1 X# trans_valid $end
      $var wire 32 \# trans_wdata [31:0] $end
      $var wire  1 Z# trans_we $end
      $var wire  2 &* wdata_offset [1:0] $end
      $scope module data_obi_i $end
       $var wire 32 k* TRANS_STABLE [31:0] $end
       $var wire  1 y! clk $end
       $var wire  1 P, next_state $end
       $var wire 32 Y# obi_addr_o [31:0] $end
       $var wire  6 a# obi_atop_o [5:0] $end
       $var wire  4 [# obi_be_o [3:0] $end
       $var wire  1 m* obi_err_i $end
       $var wire  1 )* obi_gnt_i $end
       $var wire 32 Z* obi_rdata_i [31:0] $end
       $var wire  1 X# obi_req_o $end
       $var wire  1 Y* obi_rvalid_i $end
       $var wire 32 \# obi_wdata_o [31:0] $end
       $var wire  1 Z# obi_we_o $end
       $var wire  1 m* resp_err_o $end
       $var wire 32 Z* resp_rdata_o [31:0] $end
       $var wire  1 Y* resp_valid_o $end
       $var wire  1 U* rst_n $end
       $var wire  1 P, state_q $end
       $var wire 32 Y# trans_addr_i [31:0] $end
       $var wire  6 a# trans_atop_i [5:0] $end
       $var wire  4 [# trans_be_i [3:0] $end
       $var wire  1 )* trans_ready_o $end
       $var wire  1 X# trans_valid_i $end
       $var wire 32 \# trans_wdata_i [31:0] $end
       $var wire  1 Z# trans_we_i $end
      $upscope $end
     $upscope $end
     $scope module sleep_unit_i $end
      $var wire 32 j* PULP_CLUSTER [31:0] $end
      $var wire  1 m* apu_busy_i $end
      $var wire  1 y! clk_gated_o $end
      $var wire  1 T* clk_ungated_i $end
      $var wire  1 c* clock_en $end
      $var wire  1 Q# core_busy_d $end
      $var wire  1 K core_busy_q $end
      $var wire  1 [* core_sleep_o $end
      $var wire  1 e! ctrl_busy_i $end
      $var wire  1 ]* debug_p_elw_no_sleep_i $end
      $var wire  1 b* fetch_enable_d $end
      $var wire  1 V* fetch_enable_i $end
      $var wire  1 H fetch_enable_o $end
      $var wire  1 H fetch_enable_q $end
      $var wire  1 0# if_busy_i $end
      $var wire  1 p# lsu_busy_i $end
      $var wire  1 m* p_elw_busy_d $end
      $var wire  1 L p_elw_busy_q $end
      $var wire  1 \* p_elw_finish_i $end
      $var wire  1 G$ p_elw_start_i $end
      $var wire  1 n* pulp_clock_en_i $end
      $var wire  1 U* rst_n $end
      $var wire  1 m* scan_cg_en_i $end
      $var wire  1 x! wake_from_sleep_i $end
      $scope module core_clock_gate_i $end
       $var wire  1 *# clk_en $end
       $var wire  1 T* clk_i $end
       $var wire  1 y! clk_o $end
       $var wire  1 c* en_i $end
       $var wire  1 m* scan_cg_en_i $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module ram_i $end
     $var wire 32 v+ DATA_RDATA_WIDTH [31:0] $end
     $var wire 32 Q, DBG_ADDR_WIDTH [31:0] $end
     $var wire 32 e* INSTR_RDATA_WIDTH [31:0] $end
     $var wire 32 v+ IRQ_WIDTH [31:0] $end
     $var wire 32 f, MMADDR_DBG [31:0] $end
     $var wire 32 `, MMADDR_EXIT [31:0] $end
     $var wire 32 ^, MMADDR_PRINT [31:0] $end
     $var wire 32 h, MMADDR_RNDNUM [31:0] $end
     $var wire 32 g, MMADDR_RNDSTALL [31:0] $end
     $var wire 32 a, MMADDR_SIGBEGIN [31:0] $end
     $var wire 32 c, MMADDR_SIGDUMP [31:0] $end
     $var wire 32 b, MMADDR_SIGEND [31:0] $end
     $var wire 32 _, MMADDR_TESTSTATUS [31:0] $end
     $var wire 32 i, MMADDR_TICKS [31:0] $end
     $var wire 32 d, MMADDR_TIMERREG [31:0] $end
     $var wire 32 e, MMADDR_TIMERVAL [31:0] $end
     $var wire 32 f* RAM_ADDR_WIDTH [31:0] $end
     $var wire 32 ], RND_IRQ_ID [31:0] $end
     $var wire 32 X, RND_STALL_DATA_EN [31:0] $end
     $var wire 32 [, RND_STALL_DATA_GNT [31:0] $end
     $var wire 32 Z, RND_STALL_DATA_MAX [31:0] $end
     $var wire 32 Y, RND_STALL_DATA_MODE [31:0] $end
     $var wire 32 \, RND_STALL_DATA_VALID [31:0] $end
     $var wire 32 S, RND_STALL_INSTR_EN [31:0] $end
     $var wire 32 V, RND_STALL_INSTR_GNT [31:0] $end
     $var wire 32 U, RND_STALL_INSTR_MAX [31:0] $end
     $var wire 32 T, RND_STALL_INSTR_MODE [31:0] $end
     $var wire 32 W, RND_STALL_INSTR_VALID [31:0] $end
     $var wire 32 R, RND_STALL_REGS [31:0] $end
     $var wire  1 T* clk_i $end
     $var wire 32 U! core_data_rdata [31:0] $end
     $var wire 128 Q! core_instr_rdata [127:0] $end
     $var wire  1 H* cycle_count_clear $end
     $var wire  1 T cycle_count_overflow_q $end
     $var wire 32 S cycle_count_q [31:0] $end
     $var wire 32 (* data_addr_aligned [31:0] $end
     $var wire 22 <* data_addr_dec [21:0] $end
     $var wire 32 Y# data_addr_i [31:0] $end
     $var wire  4 ?* data_be_dec [3:0] $end
     $var wire  4 [# data_be_i [3:0] $end
     $var wire  1 )* data_gnt_o $end
     $var wire 32 W# data_rdata_mux [31:0] $end
     $var wire 32 Z* data_rdata_o [31:0] $end
     $var wire  1 @* data_req_dec $end
     $var wire  1 X# data_req_i $end
     $var wire  1 Y* data_rvalid_o $end
     $var wire  1 j, data_rvalid_q $end
     $var wire 32 =* data_wdata_dec [31:0] $end
     $var wire 32 \# data_wdata_i [31:0] $end
     $var wire  1 >* data_we_dec $end
     $var wire  1 Z# data_we_i $end
     $var wire 13 [ debug_req_duration_q [12:0] $end
     $var wire  1 F debug_req_o $end
     $var wire  1 Z debug_req_value_q $end
     $var wire 15 Y debugger_start_cnt_q [14:0] $end
     $var wire  1 J* debugger_valid $end
     $var wire 32 I* debugger_wdata [31:0] $end
     $var wire 32 h* dm_halt_addr_i [31:0] $end
     $var wire 32 o, errno [31:0] $end
     $var wire  1 7* exit_valid_o $end
     $var wire 32 8* exit_value_o [31:0] $end
     $var wire 32 d* i [31:0] $end
     $var wire 32 +# instr_addr_i [31:0] $end
     $var wire 22 -# instr_addr_remap [21:0] $end
     $var wire  1 Y! instr_gnt_o $end
     $var wire 128 R# instr_rdata_o [127:0] $end
     $var wire  1 X! instr_req_i $end
     $var wire  1 E instr_rvalid_o $end
     $var wire  1 k, instr_rvalid_q $end
     $var wire  1 [! irq_ack_i $end
     $var wire  5 \! irq_id_i [4:0] $end
     $var wire 32 G irq_o [31:0] $end
     $var wire 32 R irq_q [31:0] $end
     $var wire 32 h# pc_core_id_i [31:0] $end
     $var wire  1 B* print_valid $end
     $var wire 32 A* print_wdata [31:0] $end
     $var wire 22 <* ram_data_addr [21:0] $end
     $var wire  4 ?* ram_data_be [3:0] $end
     $var wire  1 )* ram_data_gnt $end
     $var wire 32 U! ram_data_rdata [31:0] $end
     $var wire  1 ;* ram_data_req $end
     $var wire  1 l, ram_data_valid $end
     $var wire 32 =* ram_data_wdata [31:0] $end
     $var wire  1 >* ram_data_we $end
     $var wire 22 -# ram_instr_addr [21:0] $end
     $var wire  1 Y! ram_instr_gnt $end
     $var wire 128 Q! ram_instr_rdata [127:0] $end
     $var wire  1 ,# ram_instr_req $end
     $var wire  1 m, ram_instr_valid $end
     $var wire  1 n, rnd_irq $end
     $var wire 32 X rnd_num [31:0] $end
     $var wire  1 O* rnd_num_req $end
     $var wire 32 L* rnd_stall_addr [31:0] $end
     $var wire  1 W rnd_stall_data_gnt $end
     $var wire  1 X# rnd_stall_data_req $end
     $var wire  1 V rnd_stall_instr_gnt $end
     $var wire  1 X! rnd_stall_instr_req $end
     $var wire 32 U rnd_stall_rdata [31:0] $end
     $var wire 32 7! rnd_stall_regs[0] [31:0] $end
     $var wire 32 A! rnd_stall_regs[10] [31:0] $end
     $var wire 32 B! rnd_stall_regs[11] [31:0] $end
     $var wire 32 C! rnd_stall_regs[12] [31:0] $end
     $var wire 32 D! rnd_stall_regs[13] [31:0] $end
     $var wire 32 E! rnd_stall_regs[14] [31:0] $end
     $var wire 32 F! rnd_stall_regs[15] [31:0] $end
     $var wire 32 8! rnd_stall_regs[1] [31:0] $end
     $var wire 32 9! rnd_stall_regs[2] [31:0] $end
     $var wire 32 :! rnd_stall_regs[3] [31:0] $end
     $var wire 32 ;! rnd_stall_regs[4] [31:0] $end
     $var wire 32 <! rnd_stall_regs[5] [31:0] $end
     $var wire 32 =! rnd_stall_regs[6] [31:0] $end
     $var wire 32 >! rnd_stall_regs[7] [31:0] $end
     $var wire 32 ?! rnd_stall_regs[8] [31:0] $end
     $var wire 32 @! rnd_stall_regs[9] [31:0] $end
     $var wire  1 K* rnd_stall_req $end
     $var wire 32 M* rnd_stall_wdata [31:0] $end
     $var wire  1 N* rnd_stall_we $end
     $var wire  1 U* rst_ni $end
     $var wire  3 9* select_rdata_d [2:0] $end
     $var wire  3 M select_rdata_q [2:0] $end
     $var wire 32 D* sig_begin_d [31:0] $end
     $var wire 32 O sig_begin_q [31:0] $end
     $var wire 32 C* sig_end_d [31:0] $end
     $var wire 32 N sig_end_q [31:0] $end
     $var wire 32 Q* sig_fd [31:0] $end
     $var wire  1 X* tests_failed_o $end
     $var wire  1 W* tests_passed_o $end
     $var wire 32 Q timer_cnt_q [31:0] $end
     $var wire 32 P timer_irq_mask_q [31:0] $end
     $var wire  1 E* timer_reg_valid $end
     $var wire  1 F* timer_val_valid $end
     $var wire 32 G* timer_wdata [31:0] $end
     $var wire  1 :* transaction $end
     $var wire  1 P* use_sig_file $end
     $scope module data_gnt_stall_i $end
      $var wire 32 v+ DATA_WIDTH [31:0] $end
      $var wire 32 k* MAX_STALL_N [31:0] $end
      $var wire 32 f* RAM_ADDR_WIDTH [31:0] $end
      $var wire  1 T* clk_i $end
      $var wire 32 _ delay_value [31:0] $end
      $var wire  1 G! en_stall_i $end
      $var wire 32 J! gnt_stall_i [31:0] $end
      $var wire  1 W grant_core_o $end
      $var wire  1 ] grant_core_o_q $end
      $var wire 32 ^ grant_delay_cnt [31:0] $end
      $var wire  1 X# grant_mem_i $end
      $var wire 32 I! max_stall_i [31:0] $end
      $var wire  1 X# req_core_i $end
      $var wire  1 \ req_core_i_q $end
      $var wire  1 X# req_mem_o $end
      $var wire  1 U* rst_ni $end
      $var wire 32 H! stall_mode_i [31:0] $end
     $upscope $end
     $scope module data_rvalid_stall_i $end
      $var wire 32 j* FIFO_DATA_LSB [31:0] $end
      $var wire 32 v+ FIFO_DATA_WL [31:0] $end
      $var wire 32 v+ FIFO_DELAY_LSB [31:0] $end
      $var wire 32 O+ FIFO_DELAY_WL [31:0] $end
      $var wire 32 S+ FIFO_DEPTH [31:0] $end
      $var wire 32 O+ FIFO_PTR_WL [31:0] $end
      $var wire 32 p, FIFO_WE_LSB [31:0] $end
      $var wire 32 k* FIFO_WE_WL [31:0] $end
      $var wire 32 q, FIFO_WL [31:0] $end
      $var wire  1 T* clk_i $end
      $var wire  4 v current_delay [3:0] $end
      $var wire  1 G! en_stall_i $end
      $var wire 37 e fifo[0] [36:0] $end
      $var wire 37 g fifo[1] [36:0] $end
      $var wire 37 i fifo[2] [36:0] $end
      $var wire 37 k fifo[3] [36:0] $end
      $var wire 37 m fifo[4] [36:0] $end
      $var wire 37 o fifo[5] [36:0] $end
      $var wire 37 q fifo[6] [36:0] $end
      $var wire 37 s fifo[7] [36:0] $end
      $var wire  1 ` fifo_empty $end
      $var wire  1 a fifo_full $end
      $var wire  1 6* fifo_push $end
      $var wire  1 )* gnt_i $end
      $var wire 32 w i [31:0] $end
      $var wire 32 I! max_stall_i [31:0] $end
      $var wire 32 W# rdata_i [31:0] $end
      $var wire 32 Z* rdata_o [31:0] $end
      $var wire  1 X# req_i $end
      $var wire  4 c rptr [3:0] $end
      $var wire  1 U* rst_ni $end
      $var wire  1 u rvalid_i_q $end
      $var wire  1 Y* rvalid_o $end
      $var wire 32 H! stall_mode_i [31:0] $end
      $var wire 32 K! valid_stall_i [31:0] $end
      $var wire  1 Z# we_i $end
      $var wire  4 b wptr [3:0] $end
      $var wire  3 d wptr_rdata [2:0] $end
     $upscope $end
     $scope module dp_ram_i $end
      $var wire 32 f* ADDR_WIDTH [31:0] $end
      $var wire 32 e* INSTR_RDATA_WIDTH [31:0] $end
      $var wire 22 -# addr_a_i [21:0] $end
      $var wire 22 .# addr_a_int [21:0] $end
      $var wire 22 <* addr_b_i [21:0] $end
      $var wire 22 R* addr_b_int [21:0] $end
      $var wire  4 O, be_a_i [3:0] $end
      $var wire  4 ?* be_b_i [3:0] $end
      $var wire 32 r, bytes [31:0] $end
      $var wire  1 T* clk_i $end
      $var wire  1 ,# en_a_i $end
      $var wire  1 ;* en_b_i $end
      $var wire 128 Q! rdata_a_o [127:0] $end
      $var wire 32 U! rdata_b_o [31:0] $end
      $var wire 32 i* wdata_a_i [31:0] $end
      $var wire 32 =* wdata_b_i [31:0] $end
      $var wire  1 m* we_a_i $end
      $var wire  1 >* we_b_i $end
      $scope module unnamedblk1 $end
       $var wire 32 V! i [31:0] $end
      $upscope $end
     $upscope $end
     $scope module instr_gnt_stall_i $end
      $var wire 32 e* DATA_WIDTH [31:0] $end
      $var wire 32 k* MAX_STALL_N [31:0] $end
      $var wire 32 f* RAM_ADDR_WIDTH [31:0] $end
      $var wire  1 T* clk_i $end
      $var wire 32 { delay_value [31:0] $end
      $var wire  1 L! en_stall_i $end
      $var wire 32 O! gnt_stall_i [31:0] $end
      $var wire  1 V grant_core_o $end
      $var wire  1 y grant_core_o_q $end
      $var wire 32 z grant_delay_cnt [31:0] $end
      $var wire  1 X! grant_mem_i $end
      $var wire 32 N! max_stall_i [31:0] $end
      $var wire  1 X! req_core_i $end
      $var wire  1 x req_core_i_q $end
      $var wire  1 X! req_mem_o $end
      $var wire  1 U* rst_ni $end
      $var wire 32 M! stall_mode_i [31:0] $end
     $upscope $end
     $scope module instr_rvalid_stall_i $end
      $var wire 32 j* FIFO_DATA_LSB [31:0] $end
      $var wire 32 v+ FIFO_DATA_WL [31:0] $end
      $var wire 32 v+ FIFO_DELAY_LSB [31:0] $end
      $var wire 32 O+ FIFO_DELAY_WL [31:0] $end
      $var wire 32 S+ FIFO_DEPTH [31:0] $end
      $var wire 32 O+ FIFO_PTR_WL [31:0] $end
      $var wire 32 p, FIFO_WE_LSB [31:0] $end
      $var wire 32 k* FIFO_WE_WL [31:0] $end
      $var wire 32 q, FIFO_WL [31:0] $end
      $var wire  1 T* clk_i $end
      $var wire  4 4! current_delay [3:0] $end
      $var wire  1 L! en_stall_i $end
      $var wire 37 #! fifo[0] [36:0] $end
      $var wire 37 %! fifo[1] [36:0] $end
      $var wire 37 '! fifo[2] [36:0] $end
      $var wire 37 )! fifo[3] [36:0] $end
      $var wire 37 +! fifo[4] [36:0] $end
      $var wire 37 -! fifo[5] [36:0] $end
      $var wire 37 /! fifo[6] [36:0] $end
      $var wire 37 1! fifo[7] [36:0] $end
      $var wire  1 | fifo_empty $end
      $var wire  1 } fifo_full $end
      $var wire  1 /# fifo_push $end
      $var wire  1 Y! gnt_i $end
      $var wire 32 5! i [31:0] $end
      $var wire 32 N! max_stall_i [31:0] $end
      $var wire 32 W! rdata_i [31:0] $end
      $var wire 32 V# rdata_o [31:0] $end
      $var wire  1 X! req_i $end
      $var wire  4 !! rptr [3:0] $end
      $var wire  1 U* rst_ni $end
      $var wire  1 3! rvalid_i_q $end
      $var wire  1 E rvalid_o $end
      $var wire 32 M! stall_mode_i [31:0] $end
      $var wire 32 P! valid_stall_i [31:0] $end
      $var wire  1 m* we_i $end
      $var wire  4 ~ wptr [3:0] $end
      $var wire  3 "! wptr_rdata [2:0] $end
     $upscope $end
     $scope module unnamedblk1 $end
      $var wire 32 S* addr [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module load_prog $end
    $var wire 1024 # firmware [1023:0] $end
    $var wire 32 C prog_size [31:0] $end
   $upscope $end
   $scope modul